import * as github from "@actions/github";
import * as core from "@actions/core";
import { GoModule } from "./deps";

export type Octokit = ReturnType<typeof github.getOctokit>;

async function isCommitInDefaultBranch(
  owner: string,
  repo: string,
  defaultBranch: string,
  commitSha: string,
  gh: Octokit,
): Promise<boolean> {
  const {
    data: { status },
  } = await gh.rest.repos.compareCommits({
    repo,
    owner,
    base: defaultBranch,
    head: commitSha,
  });

  return status === "identical" || status === "behind";
}

async function isTagInDefaultBranch(
  owner: string,
  repo: string,
  defaultBranch: string,
  tag: string,
  gh: Octokit,
): Promise<boolean> {
  const { data: repoTags } = await gh.rest.repos.listTags({
    owner,
    repo,
  });

  for (const repoTag of repoTags) {
    if (repoTag.name != tag) {
      continue;
    }

    return isCommitInDefaultBranch(
      owner,
      repo,
      defaultBranch,
      repoTag.commit.sha,
      gh,
    );
  }

  return false;
}

/**
 * Extracts the type of a given version string.
 *
 * @param versionString - The version string to extract the type from.
 *
 * A pseudo version is a version string that is generated by Go when a module is built from a commit that is not tagged. Thus, they are generated from commit data.
 * See: https://go.dev/ref/mod#pseudo-versions for more details.
 *
 * A regular version is a version string that is a tag.
 *
 */
async function getVersionType(versionString: string) {
  // matches pseudo versions like v0.0.5-0.20220116011046-fa5810519dcb
  const pseudoVersionRegex = /-([\d.]*)-([a-f0-9]{12})(?:\+[\w.-]+)?$/;
  // matches real versions like v0.1.0
  const versionRegex = /^(v\d+\.\d+\.\d+)$/;

  const pseudoVersionMatch = versionString.match(pseudoVersionRegex);
  const versionMatch = versionString.match(versionRegex);

  return {
    commitSha: pseudoVersionMatch?.[2],
    tag: versionMatch?.[1],
  };
}

/**
 * Checks if a given go module in its respective GitHub repository's default branch.
 *
 * The version can be a tag or a commit.
 *
 * @param path - The path of the GitHub repository in the format "github.com/owner/repo".
 * @param version - The version to validate.
 * @param octokitClient - The Octokit client used to make API requests to GitHub.
 *
 * @returns A boolean indicating whether the version exists in the repository.
 */
export async function isGoModReferencingDefaultBranch(
  mod: GoModule,
  octokitClient: Octokit,
) {
  // repo format github.com/smartcontractkit/chainlink
  const [, owner, repo] = mod.path.split("/");

  const {
    data: { default_branch: defaultBranch },
  } = await octokitClient.rest.repos.get({ owner, repo });
  core.debug(
    `Processing module: ${mod.name} ${mod.path} ${mod.version} ${mod.goModFilePath}`,
  );
  const result = await getVersionType(mod.version);
  if (result?.commitSha) {
    return isCommitInDefaultBranch(
      owner,
      repo,
      defaultBranch,
      result.commitSha,
      octokitClient,
    );
  }

  if (result?.tag) {
    return isTagInDefaultBranch(
      owner,
      repo,
      defaultBranch,
      result.tag,
      octokitClient,
    );
  }

  return false;
}
