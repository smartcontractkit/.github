name: manifest-build
description: "Builds all manifest models and uploads them to a cache"

inputs:
  # general inputs --------------------------------
  setup-only:
    description: "Only setup environment with AWS, github, nix without building + pushing"
    required: false
    default: false
  add-packages:
    description: "Additional packages to build on top of the declared check packages (space separated)"
    required: false
    default: ""
  
  # AWS inputs ------------------------------------
  aws-region:
    description: ""
    required: false
    default: "us-west-1"
  role-to-assume: 
    description: ""
    required: false
    default: ""
  role-duration-seconds:
    description: ""
    required: false
    default: 3600
    
  # cache inputs ----------------------------------
  cache-url:
    description: "Nix cache URL"
    required: false
    default: ""
  cache-pubkey:
    description: "Nix cache binary public key"
    required: false
    default: ""
  cache-privkey:
    description: "Nix cache binary private signing key"
    required: false
    default: ""

  # github inputs ---------------------------------
  github-token:
    description: "GitHub auth token for private repos (if needed)"
    required: false
    default: ""

  # grafana cloud inputs --------------------------
  metrics-job-name:
    description: "grafana metrics job name"
    required: false
    default: manifest-build
  gc-host:
    description: "grafana cloud hostname"
    required: false
  gc-basic-auth:
    description: "grafana cloud basic auth"
    required: false

runs:
  using: composite
  steps:
    - name: Checkout repo
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        role-duration-seconds: ${{ inputs.role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
    - name: setup AWS credentials for nix
      run: |
        # set up folder with AWS configs
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set aws_session_token $AWS_SESSION_TOKEN
        aws configure set region ${{ inputs.aws-region }}
        # symlink credential folders for nix build access
        sudo ln -s ~/.aws /var/root # TODO: make path dynamic based on OS (hard-coded for Mac)

    - uses: cachix/install-nix-action@6004951b182f8860210c8d6f0d808ec5b1a33d28 # v25
      with:
        install_url: https://releases.nixos.org/nix/nix-2.18.1/install
        nix_path: nixpkgs=channel:nixos-unstable
        # Enables sandbox for all drv except those with `__noChroot = true;`
        # Add caches for public nixos cache + public community cache + specified private cache
        extra_nix_config: |
          sandbox = relaxed
          substituters = https://cache.nixos.org https://nix-community.cachix.org ${{ inputs.cache-url }}
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= ${{ inputs.cache-pubkey }}

    - uses: MrSquaare/ssh-setup-action@7bfdda6ef6839504e3a5b2625ad971b17461a0db # v3
      with:
        host: github.com
        private-key: ${{ inputs.github-token }}

    - name: Run all builds
      if: ${{ !inputs.setup-only }} # skip for setup only
      shell: bash
      run: |
        nix flake check

    - name: Get models from flake check
      if: ${{ !inputs.setup-only }} # skip for setup only
      id: getModels
      run: |
        PKGS=$(nix flake show --json --allow-import-from-derivation | jq -r '.checks | .[] | keys[]' | sort -u | tr '\n' ' ')
        PKGS+=" ${{ inputs.add-packages }}"
        echo "pkgs=$PKGS" >> $GITHUB_OUTPUT
    - name: Calculate output + derivation paths
      if: ${{ !inputs.setup-only }} # skip for setup only
      id: buildPaths
      run: |
        PATHS=""
        for key in ${{ steps.getModels.outputs.pkgs }}; do
            pkg="'.#\"$key\"'"

            # get runtime output   
            echo "nix build $pkg"
            outPath=$(eval "nix build --no-link --print-out-paths --verbose --narinfo-cache-negative-ttl 0 $pkg")
            echo $outPath
            PATHS+="$outPath "

            # experimental
            # get build time derivation - does not copy additional build-time dependencies
            # small assumption that other build-time dependencies are available through other nix caches
            echo "nix path-info --derivation $pkg"
            drv=$(eval "nix path-info --derivation $pkg")
            echo $drv
            # PATHS+="$drv " # TODO: disabled buildtime deps for now

            echo "-------------------------"
        done
        echo "paths=$PATHS" >> $GITHUB_OUTPUT
    - name: Sign all paths locally
      if: ${{ !inputs.setup-only }} # skip for setup only
      run: |
        echo "${{ inputs.cache-privkey }}" >> priv.pem
        nix store sign -k priv.pem --verbose ${{ steps.buildPaths.outputs.paths }}
    - name: Copy all paths to bucket
      if: ${{ !inputs.setup-only }} # skip for setup only
      run: |
        nix copy --verbose --narinfo-cache-positive-ttl 0 --to ${{ inputs.cache-url }} ${{ steps.buildPaths.outputs.paths }}

    - name: Collect metrics
      if: always()
      id: collect-gha-metrics
      uses: smartcontractkit/push-gha-metrics-action@031fd89b33b3e7722b0c4d2593ece1861d9f503f
      with:
        basic-auth: ${{ inputs.gc-basic-auth }}
        hostname: ${{ inputs.gc-host }}
        this-job-name: ${{ inputs.metrics-job-name }}
      continue-on-error: true
