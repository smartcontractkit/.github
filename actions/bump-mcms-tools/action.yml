name: "Bump mcms-tools version"
description: "Detect latest mcms-tools release and update workflow inputs"

inputs:
  github_token:
    description: "Token for GitHub API (gh cli)"
    required: true
  mcms_repo:
    description: "Repo to read releases from (owner/name)"
    required: false
    default: "smartcontractkit/mcms-tools"
  workflows_regex:
    description:
      "Regex pattern to match workflow files to update (can live under any
      directory)"
    required: false
    default: ".*/\\.github/workflows/.*\\.(yml|yaml)$"
  action_uses_pattern:
    description: "String to match the composite action step (prefix of uses:)"
    required: false
    default: "smartcontractkit/.github/actions/get-mcms-tools@"
  version_input_path:
    description: "The YAML path to the input (relative to the step) to set"
    required: false
    default: "with.version"

outputs:
  latest_tag:
    description: "Latest mcms-tools release tag"
    value: ${{ steps.latest.outputs.tag }}
  changed:
    description: "true if any file changed, false otherwise"
    value: ${{ steps.update.outputs.changed }}

runs:
  using: "composite"
  steps:
    - name: Check out
      uses: actions/checkout@v4

    - name: Install yq
      uses: dcarbone/install-yq-action@3b5b9f8b5d98b7d7e4cf94337336e414a2d79a8b # v1.3.1
      with:
        version: v4

    - name: Resolve latest tag
      id: latest
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        MCMS_REPO: ${{ inputs.mcms_repo }}
      run: |
        set -euo pipefail

        echo "Fetching most recent non-draft release from $MCMS_REPO"
        TAG=$(gh api "repos/$MCMS_REPO/releases" --paginate \
          --jq '[.[] | select(.draft==false)][0].tag_name')

        if [[ -z "${TAG:-}" || "${TAG}" == "null" ]]; then
          echo "No non-draft releases found in $MCMS_REPO" >&2
          exit 1
        fi

        echo "Latest tag discovered: $TAG"
        echo "tag=$TAG" | tee -a "$GITHUB_OUTPUT"

    - name: Update workflow files
      id: update
      shell: bash
      env:
        LATEST: ${{ steps.latest.outputs.tag }}
        PATTERN: ${{ inputs.action_uses_pattern }} # e.g. smartcontractkit/.github/actions/get-mcms-tools@
        VERSION_KEY: ${{ inputs.version_input_path }} # usually with.version
        WORKFLOWS_REGEX: ${{ inputs.workflows_regex }}
      run: |
        set -Eeuo pipefail
        IFS=$'\n\t'

        changed=false

        echo "::notice::Searching for steps using pattern: $PATTERN"
        echo "::notice::Latest version to set: $LATEST"
        echo "::notice::Workflows regex: $WORKFLOWS_REGEX"

        # Find workflow files matching regex
        mapfile -d '' files < <(find . -regextype posix-extended -regex "$WORKFLOWS_REGEX" -type f -print0 || true)
        total=${#files[@]}
        echo "::notice::Found $total potential workflow file(s)"

        if [[ $total -eq 0 ]]; then
          echo "::warning::No workflow files matched regex ($WORKFLOWS_REGEX)"
          echo "changed=$changed" | tee -a "$GITHUB_OUTPUT"
          exit 0
        fi

        for f in "${files[@]}"; do
          echo "::group::Processing $f"

          # Collect all existing versions for this action
          current_versions="$(yq -r '
            .jobs[]?.steps[]?
            | select((.uses // "") | type == "!!str" and (.uses | test("^'"$PATTERN"'")))
            | .with.version
          ' "$f" | sed '/^$/d' || true)"

          if [[ -z "$current_versions" ]]; then
            echo "::notice::No existing version found — will set to $LATEST"
          else
            echo "::notice::Existing version(s):"
            echo "$current_versions" | sed 's/^/  - /'
          fi

          # If all existing versions already equal the latest tag, skip update
          if [[ -n "$current_versions" ]] && ! echo "$current_versions" | grep -qv "$LATEST"; then
            echo "::notice::↩️ All versions already at $LATEST — no update needed."
            echo "::endgroup::"
            continue
          fi

          before_hash=$(sha1sum "$f" | cut -d' ' -f1)

          # Apply patch
          yq -i '
            (.jobs[]?.steps[]?
             | select((.uses // "") | type == "!!str" and (.uses | test("^'"$PATTERN"'")))
             | .with.version) = "'"$LATEST"'"
          ' "$f"

          after_hash=$(sha1sum "$f" | cut -d' ' -f1)

          if [[ "$before_hash" != "$after_hash" ]]; then
            echo "::notice::✅ Updated $f → version set to $LATEST"
            changed=true
          else
            echo "::notice::↩️ No change detected (already up-to-date)"
          fi

          echo "::endgroup::"
        done

        if [[ "$changed" == "true" ]]; then
          echo "::notice::Workflow(s) updated to $LATEST"
        else
          echo "::notice::All workflows already at latest version ($LATEST)"
        fi

        echo "changed=$changed" | tee -a "$GITHUB_OUTPUT"
