name: build-push-docker
description: |
  Reusable action to build and push docker image artifacts for a specific
  platform. Use this with the `build-push-docker-manifest` action to create
  a Docker image manifest for multi-platform support.
inputs:
  docker-build-args:
    description: |
      Build arguments for the docker image build. See:
      https://docs.docker.com/reference/cli/docker/buildx/build/#build-arg
    required: false
  docker-build-contexts:
    description: "List of additional build contexts (e.g., name=path)"
    required: false
  docker-restore-cache:
    description: |
      Toggles the docker cache for builds. If set to `false`, the cache will not be used.
      Configure source with `docker-build-cache-from` input parameter.
      See `--no-cache` flag in:
      https://docs.docker.com/engine/reference/commandline/buildx_build/#cache
    required: false
    default: "true"
  docker-save-cache:
    description: |
      Whether to save the Docker build cache after the build. If set to `false`,
      the cache will not be saved. Configure destination with `docker-build-cache-to`
      input parameter.
    required: false
    default: "false"
  # See: https://github.com/moby/buildkit#github-actions-cache-experimental
  docker-build-cache-from:
    description: |
      Source of Docker build cache.

      ",scope=buildkit-<runner arch>" is appended to this input in order to set
      caching for the specific runner architecture.
    required: false
    default: "type=gha,timeout=10m"
  # See: https://github.com/moby/buildkit#github-actions-cache-experimental
  docker-build-cache-to:
    description: |
      Destination of Docker build cache.

      ",scope=buildkit-<runner arch>" is appended to this input in order to set
      caching for the specific runner architecture.
    required: false
    default: "type=gha,timeout=10m,mode=max,ignore-error=true"
  docker-push:
    description: "Push the docker image. Build only (no push) if: false."
    required: false
    default: "true"
  docker-attestations:
    description: |
      Whether to create Docker attestations for the image. Defaults to `true`.
      See: https://docs.docker.com/build/ci/github-actions/attestations/
    required: false
    default: "true"
  docker-registry-url:
    required: false
    description: |
      Hostname for the docker image registry.

      Required when inputs.docker-push is true.

      Examples:
        public.ecr.aws
        <account-id>.dkr.ecr.<region>.amazonaws.com
  docker-repository-name:
    required: false
    description: |
      Name of the Docker repository excluding hostname. Excludes any tags. Public ECR's will include a registry alias and a forward slash.

      Required when inputs.docker-push is true.

      Examples:
        chainlink/chainlink # Public ECR
        chainlink/ccip # Public ECR
        my-repo-name # Private ECR
  docker-target:
    description: "Target stage in the Dockerfile to build."
    required: false
  github-token:
    description: |
      GitHub token mounted as a Docker secret for builds which require GitHub
      auth (private repo deps).
    required: false
  tags:
    required: false
    description: "Tags input for the docker metadata action"
    # Tags should always be immutable.
    default: |
      type=sha,prefix=pr=,event=pr
      type=ref,event=tag
  dockerfile:
    description: Path to dockerfile
    required: false
    default: "./Dockerfile"
  context:
    description:
      "Build's context is the set of files located in the specified PATH or URL"
    required: false
  platform:
    # See: https://docs.docker.com/reference/cli/docker/buildx/build/#platform
    description:
      "Platform for the docker image, e.g. linux/amd64 or linux/arm64"
    required: true
  # aws inputs
  aws-region:
    description: "AWS region for ECR. For public images, use: us-east-1"
    required: false
    default: "us-east-1"
  aws-account-number:
    description: |
      AWS account number for the ECR registry.

      Required when inputs.docker-push is true.
    required: false
  aws-role-arn:
    description: |
      AWS role ARN with permissions to push ECR images.

      Required when inputs.docker-push is true.
    required: false
  # ECR login inputs for private base images
  enable-ecr-login:
    description: |
      Enable AWS ECR login before Docker build.

      This is useful when your Dockerfile uses private ECR images as base images.
      When enabled, you must also provide ecr-registries and ecr-aws-region.
    required: false
    default: "false"
  ecr-registries:
    description: |
      Comma-separated list of ECR registry IDs to authenticate with.

      Example: "123456789012,987654321098"

      Required when enable-ecr-login is true.
    required: false
  ecr-aws-region:
    description: |
      AWS region for ECR authentication.

      Example: "us-east-1"

      Required when enable-ecr-login is true.
    required: false

outputs:
  docker-repository-name:
    description: "Docker repository name"
    value: ${{ inputs.docker-repository-name }}
  docker-image-sha-digest-amd64:
    description: "Docker image SHA digest for platform: amd64"
    value: ${{ steps.set-outputs.outputs.docker-image-sha-digest-amd64 }}
  docker-image-sha-digest-arm64:
    description: "Docker image SHA digest for platform: amd64"
    value: ${{ steps.set-outputs.outputs.docker-image-sha-digest-arm64 }}
  docker-image-tags:
    description: "Docker image tags"
    value: ${{ steps.docker-meta.outputs.tags }}

runs:
  using: composite
  steps:
    - name: Validate input combinations
      shell: bash
      env:
        AWS_ACCOUNT_NUMBER: ${{ inputs.aws-account-number }}
        AWS_ROLE_ARN: ${{ inputs.aws-role-arn }}
        DOCKER_PUSH: ${{ inputs.docker-push }}
        DOCKER_REGISTRY_URL: ${{ inputs.docker-registry-url }}
        DOCKER_REPOSITORY_NAME: ${{ inputs.docker-repository-name }}
      run: |
        if [[ "${DOCKER_PUSH}" != "true" ]]; then
          echo "::info::docker-push is not true; skipping validation of inputs required for pushing."
          exit 0
        fi
        # We only need these inputs if we're pushing the Docker image.
        if [[ -z "${AWS_ACCOUNT_NUMBER}" ]]; then
          echo "::error::aws-account-number input is required when docker-push is true."
          exit 1
        fi
        if [[ -z "${AWS_ROLE_ARN}" ]]; then
          echo "::error::aws-role-arn input is required when docker-push is true."
          exit 1
        fi
        if [[ -z "${DOCKER_REGISTRY_URL}" ]]; then
          echo "::error::docker-registry-url input is required when docker-push is true."
          exit 1
        fi
        if [[ -z "${DOCKER_REPOSITORY_NAME}" ]]; then
          echo "::error::docker-repository-name input is required when docker-push is true."
          exit 1
        fi

    - name: Check runner arch and platform compatibility
      shell: bash
      env:
        RUNNER_ARCH: ${{ runner.arch }}
        RUNNER_OS: ${{ runner.os }}
        INPUT_PLATFORM: ${{ inputs.platform }}
      run: |
        # Fail if wrong OS or if runner arch is different than target platform.
        if [[ "${RUNNER_OS}" != "Linux" ]]; then
          echo "::error::Runner OS is not Linux; only Linux is supported."
          exit 1
        elif [[ "${RUNNER_ARCH}" == "X64" && "${INPUT_PLATFORM}" == "linux/amd64" ]] ||
           [[ "${RUNNER_ARCH}" == "ARM64" && "${INPUT_PLATFORM}" == "linux/arm64" ]]; then
          echo "Runner arch (${RUNNER_ARCH}) and platform (${INPUT_PLATFORM}) are compatible."
        else
          echo "::error::Runner arch (${RUNNER_ARCH}) is different than target platform ${INPUT_PLATFORM} or not supported."
          exit 1
        fi

    - name: Configure AWS credentials
      if:
        ${{ inputs.enable-ecr-login == 'true' || inputs.docker-push == 'true' }}
      uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-duration-seconds: 900
        aws-region:
          ${{ inputs.enable-ecr-login == 'true' && inputs.ecr-aws-region ||
          inputs.aws-region }}
        mask-aws-account-id: true

    - name: Login to Amazon ECR for base images
      if: ${{ inputs.enable-ecr-login == 'true' }}
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        registries: ${{ inputs.ecr-registries }}

    - name: Login to ECR for publishing
      if: ${{ inputs.docker-push == 'true' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        registry-type: >-
          ${{
            startsWith(inputs.docker-registry-url, 'public.ecr.aws') &&
          'public'
              || 'private'
          }}
        registries: ${{ inputs.aws-account-number }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
      with:
        version: latest

    - name: Docker meta
      if: ${{ inputs.docker-push == 'true' }}
      id: docker-meta
      uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
      with:
        images:
          ${{ format('{0}/{1}', inputs.docker-registry-url,
          inputs.docker-repository-name) }}
        tags: ${{ inputs.tags }}
        flavor: |
          latest=false

    # Build records contain AWS account ID's (in e.g. the private ECR
    # hostname) and AWS account ID's are currently considered `sensitive`.
    # Avoid including the build record as a GitHub Actions artifact unless the
    # ECR is public.
    - name: Docker build record
      if: ${{ inputs.docker-push == 'true' }}
      id: docker-build-record
      shell: bash
      env:
        DOCKER_REGISTRY_URL: ${{ inputs.docker-registry-url }}
      run: |
        build_record_artifact_upload=false
        if [[ "${DOCKER_REGISTRY_URL}" == public.ecr.aws* ]]; then
          echo "::debug::${DOCKER_REGISTRY_URL} is a public ECR registry. Docker Build Record will be uploaded as an artifact."
          build_record_artifact_upload=true
        fi
        echo "upload=${build_record_artifact_upload}" | tee -a "${GITHUB_OUTPUT}"

    - name: Docker attestations configuration
      id: docker-attest
      shell: bash
      env:
        DOCKER_ATTESTATIONS: ${{ inputs.docker-attestations }}
      run: |
        if [[ "${DOCKER_ATTESTATIONS}" == "true" ]]; then
          echo "::info::Docker attestations enabled."
          echo "docker-sbom=true" | tee -a "${GITHUB_OUTPUT}"
          echo "docker-provenance=mode=max" | tee -a "${GITHUB_OUTPUT}"
        else
          echo "::info::Docker attestations disabled."
          echo "docker-sbom=false" | tee -a "${GITHUB_OUTPUT}"
          echo "docker-provenance=false" | tee -a "${GITHUB_OUTPUT}"
        fi

    - name: Docker cache configuration
      id: docker-cache
      shell: bash
      env:
        DOCKER_RESTORE_CACHE: ${{ inputs.docker-restore-cache }}
        DOCKER_SAVE_CACHE: ${{ inputs.docker-save-cache }}
        DOCKER_BUILD_CACHE_FROM: >-
          ${{
            format('{0},scope={1}', inputs.docker-build-cache-from, runner.arch)
          }}
        DOCKER_BUILD_CACHE_TO: >-
          ${{
            format('{0},scope={1}', inputs.docker-build-cache-to, runner.arch)
          }}
      run: |
        if [[ "${DOCKER_RESTORE_CACHE}" == "true" ]]; then
          echo "no-cache=false" | tee -a "${GITHUB_OUTPUT}"
          echo "cache-from=${DOCKER_BUILD_CACHE_FROM}" | tee -a "${GITHUB_OUTPUT}"
        else
          echo "no-cache=true" | tee -a "${GITHUB_OUTPUT}"
        fi

        if [[ "${DOCKER_SAVE_CACHE}" == "true" ]]; then
          echo "cache-to=${DOCKER_BUILD_CACHE_TO}" | tee -a "${GITHUB_OUTPUT}"
        fi

    - name: Build & push image
      id: build-image
      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
      env:
        DOCKER_BUILD_CHECKS_ANNOTATIONS: true
        DOCKER_BUILD_SUMMARY: true
        DOCKER_BUILD_RECORD_UPLOAD:
          ${{ steps.docker-build-record.outputs.upload }}
        # Defaults to repository/org retention settings if unset or 0.
        DOCKER_BUILD_RECORD_RETENTION_DAYS: 0
      with:
        push: ${{ inputs.docker-push }}
        sbom: ${{ steps.docker-attest.outputs.docker-sbom }}
        provenance: ${{ steps.docker-attest.outputs.docker-provenance }}
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        build-contexts: ${{ inputs.docker-build-contexts }}
        build-args: ${{ inputs.docker-build-args }}
        target: ${{ inputs.docker-target }}
        tags: ${{ steps.docker-meta.outputs.tags }}
        labels: ${{ steps.docker-meta.outputs.labels }}
        platforms: ${{ inputs.platform }}
        no-cache: ${{ steps.docker-cache.outputs.no-cache }}
        cache-from: ${{ steps.docker-cache.outputs.docker-cache-from }}
        cache-to: ${{ steps.docker-cache.outputs.docker-cache-to }}
        secrets: |
          GIT_AUTH_TOKEN=${{ inputs.github-token || ''}}

    - name: Set outputs
      id: set-outputs
      shell: bash
      env:
        DOCKER_IMAGE_DIGEST: ${{ steps.build-image.outputs.digest }}
        INPUT_PLATFORM: ${{ inputs.platform }}
      run: |
        if [[ "${INPUT_PLATFORM}" == "linux/amd64" ]]; then
          echo "docker-image-sha-digest-amd64=${DOCKER_IMAGE_DIGEST}" | tee -a "${GITHUB_OUTPUT}"
        elif [[ "${INPUT_PLATFORM}" == "linux/arm64" ]]; then
          echo "docker-image-sha-digest-arm64=${DOCKER_IMAGE_DIGEST}" | tee -a "${GITHUB_OUTPUT}"
        fi
