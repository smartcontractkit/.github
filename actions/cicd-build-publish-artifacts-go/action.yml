name: cicd-build-publish-artifacts
description: Build / publish go artifacts

inputs:
  # general inputs
  checkout-repo:
    description: "enable git checkout repo"
    required: false
    default: "true"
  checkout-repo-fetch-depth:
    description: "number of commits to fetch"
    required: false
    default: "0"
  checkout-ref:
    description: "git ref to checkout"
    required: false
    default: ""
  app-name:
    description: ""
    required: false
  publish:
    description: ""
    required: false
    default: "false"
  update-git-tag:
    description: ""
    required: false
    default: "false"
  # aws inputs
  aws-role-duration-seconds:
    description: ""
    required: false
    default: "900"
  aws-region:
    description: ""
    required: false
  aws-account-number:
    description: ""
    required: false
  aws-role-arn:
    description: ""
    required: false
  # docker inputs
  docker-registry:
    description: choices=[local,aws]
    required: false
    default: local
  docker-image-repo:
    description: ""
    required: false
  docker-image-tag:
    description: ""
    required: false
    default: local
  # gati inputs
  use-gati:
    description: ""
    required: false
    default: "false"
  aws-role-arn-gati:
    description: ""
    required: false
  aws-lambda-url-gati:
    description: ""
    required: false
  # golang inputs
  use-go-cache:
    description: ""
    required: false
    default: "false"
  go-cache-dep-path:
    description: ""
    required: false
    default: go.sum
  go-version-file:
    description: ""
    required: false
    default: go.mod
  # goreleaser inputs
  goreleaser-dist:
    description: choices=[goreleaser,goreleaser-pro]
    required: false
    default: goreleaser
  goreleaser-version:
    description: ""
    required: false
    default: latest
  goreleaser-args:
    description: ""
    required: false
  goreleaser-key:
    description: ""
    required: false
  goreleaser-workdir:
    description: ""
    required: false
    default: "."
  # zig inputs
  use-zig:
    description: ""
    required: false
    default: "false"
  zig-version:
    description: ""
    required: false
    default: "0.10.1"

runs:
  using: composite
  steps:
    - name: Checkout repo
      if: inputs.checkout-repo == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.checkout-repo-fetch-depth }}
        ref: ${{ inputs.checkout-ref }}

    - name: Assume aws gati role
      if: inputs.use-gati == 'true'
      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
      with:
        role-to-assume: ${{ inputs.aws-role-arn-gati }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: true

    - name: Get github token from gati
      if: inputs.use-gati == 'true'
      id: get-gh-token
      uses: smartcontractkit/chainlink-github-actions/github-app-token-issuer@main
      with:
        url: ${{ inputs.aws-lambda-url-gati }}

    - name: Configure github token
      if: inputs.use-gati == 'true'
      shell: bash
      run: |
        git config --global \
          url."https://x-access-token:${{ steps.get-gh-token.outputs.access-token }}@github.com/".insteadOf \
          "https://github.com/"

    - name: Setup go
      uses: actions/setup-go@v5
      with:
        go-version-file: ${{ inputs.go-version-file }}
        cache: ${{ inputs.use-go-cache }}
        cache-dependency-path: ${{ inputs.go-cache-dep-path }}

    - name: Setup zig
      if: inputs.use-zig == 'true'
      uses: goto-bus-stop/setup-zig@abea47f85e598557f500fa1fd2ab7464fcb39406 # v2.2.1
      with:
        version: ${{ inputs.zig-version }}

    - name: Setup docker buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Set up qemu
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Process params
      shell: bash
      id: process-params
      run: |
        if [[ "${{ inputs.docker-registry }}" == "aws" ]]; then
          echo "image-repo=${{ inputs.aws-account-number }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.app-name }}" >> "$GITHUB_OUTPUT"
          echo "aws-account-number=${{ inputs.aws-account-number }}" >> "$GITHUB_OUTPUT"
        else
          echo "image-repo=localhost:5001/${{ inputs.app-name }}" >> "$GITHUB_OUTPUT"
          echo "aws-account-number=not-used" >> "$GITHUB_OUTPUT"
        fi

        if [[ "${{ inputs.use-zig }}" == "true" ]]; then
          echo "zig-exec=$(which zig)" >> "$GITHUB_OUTPUT"
        else
          echo "zig-exec=not-used" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure aws creds
      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
      if: inputs.publish == 'true' && inputs.docker-registry == 'aws'
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: true

    - name: Login to aws ecr
      if: inputs.publish == 'true' && inputs.docker-registry == 'aws'
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        registries: ${{ steps.process-params.outputs.aws-account-number }}

    - name: Update tag
      if: inputs.update-git-tag == 'true'
      uses: richardsimko/update-tag@aab2434e9a5040687874aa39d1c6377ec0cb0d94 # v1.1.6
      with:
        tag_name: v0.0.0-devel
      env:
        GITHUB_TOKEN: ${{ github.token }} # ${{ steps.get-gh-token.outputs.access-token }}

    - name: Run goreleaser release
      uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
      with:
        version: ${{ inputs.goreleaser-version }}
        distribution: ${{ inputs.goreleaser-dist }}
        args: release ${{ inputs.goreleaser-args }} --clean
        workdir: ${{ inputs.goreleaser-workdir }}
      env:
        IMAGE_REPO: ${{ steps.process-params.outputs.image-repo }}
        IMAGE_TAG: ${{ inputs.docker-image-tag }}
        GORELEASER_KEY: ${{ inputs.goreleaser-key }}
        GITHUB_TOKEN: ${{ github.token }} # ${{ steps.get-gh-token.outputs.access-token }}
        ZIG_EXEC: ${{ steps.process-params.outputs.zig-exec }}
