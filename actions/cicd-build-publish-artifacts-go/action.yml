name: cicd-build-publish-artifacts
description: Build / publish go artifacts

inputs:
  # general inputs
  checkout-repo:
    description: "enable git checkout repo"
    required: false
    default: "true"
  checkout-repo-fetch-depth:
    description: "number of commits to fetch"
    required: false
    default: "0"
  checkout-ref:
    description: "git ref to checkout"
    required: false
    default: ""
  app-name:
    description: ""
    required: false
  publish:
    description: ""
    required: false
    default: "false"
  update-git-tag:
    description: ""
    required: false
    default: "false"
  # grafana cloud inputs
  metrics-job-name:
    description: "grafana metrics job name"
    required: false
    default: cicd-build-publish-artifacts
  gc-host:
    description: "grafana cloud hostname"
    required: false
  gc-basic-auth:
    description: "grafana cloud basic auth"
    required: false
  # aws inputs
  aws-role-duration-seconds:
    description: ""
    required: false
    default: "900"
  aws-region:
    description: ""
    required: false
  aws-account-number:
    description: ""
    required: false
  aws-role-arn:
    description: ""
    required: false
  # docker inputs
  docker-registry:
    description: choices=[local,aws]
    required: false
    default: local
  docker-image-repo:
    description: ""
    required: false
  docker-image-tag:
    description: ""
    required: false
    default: local
  # gati inputs
  use-gati:
    description: ""
    required: false
    default: "false"
  aws-role-arn-gati:
    description: ""
    required: false
  aws-lambda-url-gati:
    description: ""
    required: false
  # golang inputs
  use-go-cache:
    description: ""
    required: false
    default: "false"
  go-cache-dep-path:
    description: ""
    required: false
    default: go.sum
  go-version-file:
    description: ""
    required: false
    default: go.mod
  # goreleaser inputs
  goreleaser-dist:
    description: choices=[goreleaser,goreleaser-pro]
    required: false
    default: goreleaser
  goreleaser-version:
    description: ""
    required: false
    default: latest
  goreleaser-args:
    description: ""
    required: false
  goreleaser-key:
    description: ""
    required: false
  # zig inputs
  use-zig:
    description: ""
    required: false
    default: "false"
  zig-version:
    description: ""
    required: false
    default: "0.10.1"

runs:
  using: composite
  steps:
    - name: Checkout repo
      if: inputs.checkout-repo == 'true'
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: ${{ inputs.checkout-repo-fetch-depth }}
        ref: ${{ inputs.checkout-ref }}

    - name: Assume aws gati role
      if: inputs.use-gati == 'true'
      uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
      with:
        role-to-assume: ${{ inputs.aws-role-arn-gati }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}

    - name: Get github token from gati
      if: inputs.use-gati == 'true'
      id: get-gh-token
      uses: smartcontractkit/chainlink-github-actions/github-app-token-issuer@main
      with:
        url: ${{ inputs.aws-lambda-url-gati }}

    - name: Configure github token
      if: inputs.use-gati == 'true'
      shell: bash
      run: |
        git config --global \
          url."https://x-access-token:${{ steps.get-gh-token.outputs.access-token }}@github.com/".insteadOf \
          "https://github.com/"

    - name: Setup go
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
      with:
        go-version-file: ${{ inputs.go-version-file }}
        cache: ${{ inputs.use-go-cache }}
        cache-dependency-path: ${{ inputs.go-cache-dep-path }}

    - name: Setup zig
      if: inputs.use-zig == 'true'
      uses: goto-bus-stop/setup-zig@6fede2f0550d71291c0accf2834b216e69a2d67a # v2.1.1
      with:
        version: ${{ inputs.zig-version }}

    - name: Setup docker buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

    - name: Set up qemu
      uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

    - name: Process params
      shell: bash
      id: process-params
      run: |
        if [[ "${{ inputs.docker-registry }}" == "aws" ]]; then
          echo "image-repo=${{ inputs.aws-account-number }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.app-name }}" >> "$GITHUB_OUTPUT"
          echo "aws-account-number=${{ inputs.aws-account-number }}" >> "$GITHUB_OUTPUT"
        else
          echo "image-repo=localhost:5001/${{ inputs.app-name }}" >> "$GITHUB_OUTPUT"
          echo "aws-account-number=not-used" >> "$GITHUB_OUTPUT"
        fi

        if [[ "${{ inputs.use-zig }}" == "true" ]]; then
          echo "zig-exec=$(which zig)" >> "$GITHUB_OUTPUT"
        else
          echo "zig-exec=not-used" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure aws creds
      uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
      if: inputs.publish == 'true' && inputs.docker-registry == 'aws'
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to aws ecr
      if: inputs.publish == 'true' && inputs.docker-registry == 'aws'
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        registries: ${{ steps.process-params.outputs.aws-account-number }}

    - name: Update tag
      if: inputs.update-git-tag == 'true'
      uses: richardsimko/update-tag@e173a8ef8f54ab526a91dad6139a25efed62424c # v1.0.11
      with:
        tag_name: v0.0.0-devel
      env:
        GITHUB_TOKEN: ${{ github.token }} # ${{ steps.get-gh-token.outputs.access-token }}

    - name: Run goreleaser release
      uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8 # v5.0.0
      with:
        version: ${{ inputs.goreleaser-version }}
        distribution: ${{ inputs.goreleaser-dist }}
        args: release ${{ inputs.goreleaser-args }} --clean
      env:
        IMAGE_REPO: ${{ steps.process-params.outputs.image-repo }}
        IMAGE_TAG: ${{ inputs.docker-image-tag }}
        GORELEASER_KEY: ${{ inputs.goreleaser-key }}
        GITHUB_TOKEN: ${{ github.token }} # ${{ steps.get-gh-token.outputs.access-token }}
        ZIG_EXEC: ${{ steps.process-params.outputs.zig-exec }}

    - name: Collect metrics
      if: always()
      id: collect-gha-metrics
      uses: smartcontractkit/push-gha-metrics-action@d1618b772a97fd87e6505de97b872ee0b1f1729a # v2.0.2
      with:
        basic-auth: ${{ inputs.gc-basic-auth }}
        hostname: ${{ inputs.gc-host }}
        this-job-name: ${{ inputs.metrics-job-name }}
      continue-on-error: true
