name: llm-pr-writer

inputs:
  # general inputs
  checkout-repo-fetch-depth:
    description: "number of commits to fetch"
    required: false
    default: "0"
  gh-token:
    description: "github token to make a comment with"
    required: true
    # will require at least three permissions:
    # contents: read
    # pull-requests: write or issues: write
    # repository-projects: read
    # https://docs.github.com/en/rest/issues/comments?apiVersion=2022-11-28#create-an-issue-comment
    # https://github.com/cli/cli/discussions/5307 - reason why we need the repository-projects permission
  openai-api-key:
    description: "openai api key"
    required: true
  openai-model:
    description:
      "openai model. defaults to 'o3-mini-2025-01-31'."
    required: false
    default: "o3-mini-2025-01-31"
  exclude-paths:
    description: "semi-colon(;) separated paths to exclude from diff"
    required: false
    type: string
  pr-append-file:
    description:
      "path to a markdown or text file to append to the PR message (checklist,
      etc.)"
    required: false


runs:
  using: composite
  steps:
    - name:
        Check if the event is a pull request or comment body starts with
        `/gpt-create-pr`
      shell: bash
      if: >
        github.event_name == 'pull_request' || (github.event.issue.pull_request
        && startsWith(github.event.comment.body, '/gpt-create-pr'))
      run: |
        echo "SKIP_ACTION=false" >> $GITHUB_ENV

    - name: Checkout calling repo
      if: ${{ env.SKIP_ACTION == 'false' }}
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.checkout-repo-fetch-depth }}

    - name: Format diff exclude filter
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      id: filter
      run: |
        IFS=';' read -ra exclude_paths_arr <<< "${{ inputs.exclude-paths }}"
        for i in "${!exclude_paths_arr[@]}"; do
          exclude_paths_arr[$i]="':!${exclude_paths_arr[$i]}'"
        done

        echo "exclude_filter="${exclude_paths_arr[@]}"" >> "$GITHUB_OUTPUT"

    # Fail early to avoid unnecessary API calls
    - name: If pr-append-file is set, check if it exists
      if: ${{ env.SKIP_ACTION == 'false' && inputs.pr-append-file }}
      shell: bash
      id: check_pr-append-file
      run: |
        if [ ! -f ${{ inputs.pr-append-file }} ]; then
          echo "::error::pr-append-file was set but does not exist"
          exit 1
        else
          echo "result=exists" >> "$GITHUB_OUTPUT"
        fi

    - name: Get diff output
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER:
          ${{ github.event.issue.number || github.event.pull_request.number ||
          '' }}
      run: |
        gh pr checkout $PR_NUMBER
        diff_command="git diff -W origin/\$(gh pr view --json baseRefName | jq -r '.baseRefName')...HEAD -- ${{ steps.filter.outputs.exclude_filter }}"
        diff_output=$(eval $diff_command)

        # get the PR title
        pr_title=$(gh pr view --json title | jq -r '.title')
        printf "PR TITLE: $pr_title\\\n\\\n\\\n" > diff_output.txt
        # escape all special characters and prepare for json with jq
        echo "$diff_output" | jq -Rs . | sed 's/^"//;s/"$//' >> diff_output.txt

    - name: Call ChatGPT
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      run: |
        # processes the contents of diff_output.txt and prompt: converts to raw string, removes leading and trailing quotes, and cleans up known problematic patterns.
        # this helps prepare both prompt and log content for the OpenAI API call
        diff_output=$(cat diff_output.txt | sed -e 's/\\ No newline at end of file//g' | sed -E 's/\\+$//g' | sed -E 's/\\+ //g')
        openai_prompt=$(cat ${{ github.action_path }}/pr-writer-prompt.md | sed 's/"/\\"/g' | sed -E 's/\\+$//g' | sed -E 's/\\+ //g')
        openai_model=${{ inputs.openai-model }}
        # Check if model is 'o' series with support for suffixes (e.g., o1-mini, o3-pro-2025-23-1)
        # if so, exclude temperature as this class of models does not support it
        if [[ "$openai_model" =~ o[0-9]+(-[a-zA-Z0-9-]+)* ]]; then
          request_body='{
            "model": "'$openai_model'",
            "messages": [
              {
                "role": "system",
                "content": "'$openai_prompt' \n\n```'$diff_output'```\n"
              }
            ]
          }'
        else
          request_body='{
            "model": "'$openai_model'",
            "temperature": 0.1,
            "messages": [
              {
                "role": "system",
                "content": "'$openai_prompt' \n\n```'$diff_output'```\n"
              }
            ]
          }'
        fi

        openai_result=$(echo "$request_body" | envsubst | curl https://api.openai.com/v1/chat/completions \
                      -w "%{http_code}" \
                      -o prompt_response.json \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${{ inputs.openai-api-key }}" \
                      -d @-
        )

        # throw error openai_result when is not 200
        if [ "$openai_result" != '200' ]; then
          echo "::error::OpenAI API call failed with status $openai_result: $(cat prompt_response.json)"
          exit 1
        fi

        # replace lines starting with ' -' (1space) with '  -' (2spaces)
        response_content=$(cat prompt_response.json | jq -r '.choices[0].message.content')
        echo "$response_content" | sed -e 's/^ -/  -/g' > chatgpt_output.txt

    - name: Append additional content to output
      if:
        ${{ env.SKIP_ACTION == 'false' &&
        steps.check_pr-append-file.outputs.result == 'exists' }}
      shell: bash
      run: |
        echo "Appending content to PR"
        cat ${{ inputs.pr-append-file }} >> chatgpt_output.txt

    - name: Generate PR summary
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER:
          ${{ github.event.issue.number || github.event.pull_request.number ||
          '' }}
      run: |
        # get the current body of the PR
        pr_current_body="$(gh pr view $PR_NUMBER --json body | jq -r '.body')"

        # delete every lines from <!-- DON'T DELETE. add your comments above llm generated contents -->
        # if not found, default behavior is to do nothing and rely on the user to delete the old message
        pr_current_body=$(echo "$pr_current_body" | sed -e '/<!-- DON'\''T DELETE. add your comments above llm generated contents -->/,$d')
        echo "$pr_current_body"

        pr_message="**Below is a summarization created by an LLM (${{ inputs.openai-model }}). Be mindful of hallucinations and verify accuracy.**

        $(cat chatgpt_output.txt)"

        gh pr edit $PR_NUMBER -b "$pr_current_body
        <!-- DON'T DELETE. add your comments above llm generated contents -->
        ---
        $pr_message
        "
