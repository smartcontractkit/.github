name: llm-pr-writer

inputs:
  # general inputs
  checkout-repo-fetch-depth:
    description: "number of commits to fetch"
    required: false
    default: "0"
  gh-token:
    description: "github token to make a comment with"
    required: true
    # will require at least three permissions:
    # contents: read
    # pull-requests: write or issues: write
    # repository-projects: read
    # https://docs.github.com/en/rest/issues/comments?apiVersion=2022-11-28#create-an-issue-comment
    # https://github.com/cli/cli/discussions/5307 - reason why we need the repository-projects permission
  openai-api-key:
    description: "openai api key"
    required: true
  openai-model:
    description: "openai model. defaults to 'gpt-3.5-turbo-0125'. use 'gpt-4-0125-preview' if your codebase is complex or large."
    required: false
    default: "gpt-3.5-turbo-0125"
  exclude-paths:
    description: "semi-colon(;) separated paths to exclude from diff"
    required: false
    type: string
  pr-append-file:
    description: "path to a markdown or text file to append to the PR message (checklist, etc.)"
    required: false
  workflow-ref:
    description: "ref of the workflow to checkout"
    required: false
    default: "main"
  # grafana inputs
  metrics-job-name:
    description: "grafana metrics job name"
    required: false
    default: llm-pr-writer
  gc-host:
    description: "grafana hostname"
    required: false
  gc-basic-auth:
    description: "grafana basic auth"
    required: false
  gc-org-id:
    description: "grafana org/tenant id"
    required: false

runs:
  using: composite
  steps:
    - name: Check if the event is a pull request or comment body starts with `/gpt-create-pr`
      shell: bash
      if: >
       github.event_name == 'pull_request' ||
       (github.event.issue.pull_request && startsWith(github.event.comment.body, '/gpt-create-pr'))
      run: |
        echo "SKIP_ACTION=false" >> $GITHUB_ENV

    - name: Checkout calling repo
      if: ${{ env.SKIP_ACTION == 'false' }}
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: ${{ inputs.checkout-repo-fetch-depth }}

    - name: Checkout action repo
      if: ${{ env.SKIP_ACTION == 'false' }}
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        repository: smartcontractkit/.github
        ref: ${{ inputs.workflow-ref }}
        path: 'pr_writer_actions'
        # prevents access to any other action and workflow files
        sparse-checkout: |
          actions/llm-pr-writer/pr-writer-prompt.md
        sparse-checkout-cone-mode: false
        fetch-depth: 1

    - name: Format diff exclude filter
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      id: filter
      run: |
        IFS=';' read -ra exclude_paths_arr <<< "${{ inputs.exclude-paths }}"
        for i in "${!exclude_paths_arr[@]}"; do
          exclude_paths_arr[$i]="':!${exclude_paths_arr[$i]}'"
        done

        echo "exclude_filter="${exclude_paths_arr[@]}"" >> "$GITHUB_OUTPUT"

    # Fail early to avoid unnecessary API calls
    - name: If pr-append-file is set, check if it exists
      if: ${{ env.SKIP_ACTION == 'false' && inputs.pr-append-file }}
      shell: bash
      id: check_pr-append-file
      run: |
        if [ ! -f ${{ inputs.pr-append-file }} ]; then
          echo "::error::pr-append-file was set but does not exist"
          exit 1
        else
          echo "result=exists" >> "$GITHUB_OUTPUT"
        fi

    - name: Get diff output
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number || '' }}
      run: |
        gh pr checkout $PR_NUMBER
        diff_command="git diff origin/\$(gh pr view --json baseRefName | jq -r '.baseRefName')...HEAD -- ${{ steps.filter.outputs.exclude_filter }}"
        diff_output=$(eval $diff_command)
        
        # escape all special characters and prepare for json with jq
        echo "$diff_output" | jq -Rs . | sed 's/^"//;s/"$//' > diff_output.txt

    - name: Call ChatGPT
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      run: |
        diff_output=$(cat diff_output.txt)
        openai_prompt=$(cat pr_writer_actions/actions/llm-pr-writer/pr-writer-prompt.md)
        openai_model=${{ inputs.openai-model }}
        openai_result=$(echo '{
          "model": "'$openai_model'",
          "temperature": 0.7,
          "messages": [
            {
              "role": "system",
              "content": "'$openai_prompt' \n\n```'$diff_output'```\n"
            }
          ]
        }' | envsubst | curl https://api.openai.com/v1/chat/completions \
                      -w "%{http_code}" \
                      -o prompt_response.json \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${{ inputs.openai-api-key }}" \
                      -d @-
        )

        # throw error openai_result when is not 200
        if [ "$openai_result" != '200' ]; then
          echo "::error::OpenAI API call failed with status $openai_result: $(cat prompt_response.json)"
          exit 1
        fi

        # replace lines starting with ' -' (1space) with '  -' (2spaces)
        response_content=$(cat prompt_response.json | jq -r '.choices[0].message.content')
        echo "$response_content" | sed -e 's/^ -/  -/g' > chatgpt_output.txt

    - name: Append additional content to output
      if: ${{ env.SKIP_ACTION == 'false' && steps.check_pr-append-file.outputs.result == 'exists' }}
      shell: bash
      run: |
        echo "Appending content to PR"
        cat ${{ inputs.pr-append-file }} >> chatgpt_output.txt

    - name: Generate PR summary
      if: ${{ env.SKIP_ACTION == 'false' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number || '' }}
      run: |
        # get the current body of the PR
        pr_current_body="$(gh pr view $PR_NUMBER --json body | jq -r '.body')"

        # delete every lines from <!-- DON'T DELETE. add your comments above llm generated contents -->
        # if not found, default behavior is to do nothing and rely on the user to delete the old message
        pr_current_body=$(echo "$pr_current_body" | sed -e '/<!-- DON'\''T DELETE. add your comments above llm generated contents -->/,$d')
        echo "$pr_current_body"

        pr_message="**Below is a summarization created by an LLM (${{ inputs.openai-model }}). Be mindful of hallucinations and verify accuracy.**
        
        $(cat chatgpt_output.txt)"

        gh pr edit $PR_NUMBER -b "$pr_current_body
        <!-- DON'T DELETE. add your comments above llm generated contents -->
        ---
        $pr_message
        "

    - name: Collect metrics
      if: always()
      id: collect-gha-metrics
      uses: smartcontractkit/push-gha-metrics-action@0281b09807758be1dcc41651e44e62b353808c47 # v2.1.0
      with:
        basic-auth: ${{ inputs.gc-basic-auth }}
        hostname: ${{ inputs.gc-host }}
        org-id: ${{ inputs.gc-org-id}}
        this-job-name: ${{ inputs.metrics-job-name }}
      continue-on-error: true
