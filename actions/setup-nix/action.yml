name: setup-nix
description: "Setup nix with caches"

inputs:
  # custom cache inputs ----------------------------------
  cache-url:
    description: "Custom nix cache URL"
    required: false
    default: ""
  cache-pubkey:
    description: "Custom nix cache binary public key"
    required: false
    default: ""

  # AWS inputs ------------------------------------
  aws-region:
    description: ""
    required: false
    default: "us-west-1"
  aws-role-arn:
    description: ""
    required: false
    default: ""
  aws-lambda-url:
    description: URL of GATI lambda function
    required: false
    default: ""
  role-duration-seconds:
    description: ""
    required: false
    default: 3600

  # grafana inputs --------------------------
  metrics-job-name:
    description: "grafana metrics job name"
    required: false
    default: manifest-build
  gc-host:
    description: "grafana hostname"
    required: false
  gc-basic-auth:
    description: "grafana basic auth"
    required: false
  gc-org-id:
    description: "grafana org/tenant id"
    required: false

runs:
  using: composite
  steps:
    - name: Setup GitHub token
      id: setup-github-token
      uses: smartcontractkit/.github/actions/setup-github-token@main
      with:
        aws-role-arn: ${{ inputs.aws-role-arn }}
        aws-lambda-url: ${{ inputs.aws-lambda-url }}
        aws-region: ${{ inputs.aws-region }}
        aws-role-duration-seconds: ${{ inputs.role-duration-seconds }}

    - name: Configure GitHub token from GATI
      shell: bash
      run: |
        # redirects ssh url to https with the token
        git config --global \
          url."https://x-access-token:${{ steps.setup-github-token.outputs.access-token }}@github.com/smartcontractkit/".insteadOf \
          "ssh://git@github.com/smartcontractkit/"

    - name: setup AWS credentials for nix
      shell: bash
      run: |
        # set up folder with AWS configs
        # nix reads AWS access from folder config - does not work with env vars
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set aws_session_token $AWS_SESSION_TOKEN
        aws configure set region ${{ inputs.aws-region }}

        # determine root path
        ROOT_PATH=""
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          ROOT_PATH="/root"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          ROOT_PATH="/var/root"
        else
          echo "${{ runner.os }} not supported"
          exit 1
        fi

        # symlink credential folders for nix build access
        # nix build is run via daemon on root, credentials linked for daemon access
        sudo ln -s ~/.aws $ROOT_PATH

    - uses: cachix/install-nix-action@ba0dd844c9180cbf77aa72a116d6fbc515d0e87b # v27
      with:
        install_url: https://releases.nixos.org/nix/nix-2.18.1/install
        nix_path: nixpkgs=channel:nixos-unstable
        # Enables sandbox for all drv except those with `__noChroot = true;`
        # Add caches for public nixos cache + public community cache + specified private cache
        extra_nix_config: |
          sandbox = relaxed
          substituters = https://cache.nixos.org https://nix-community.cachix.org ${{ inputs.cache-url }}
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= ${{ inputs.cache-pubkey }}

    - name: Collect metrics
      if: always()
      id: collect-gha-metrics
      uses: smartcontractkit/push-gha-metrics-action@e34ae8a4df60f4d9fdef1e32a69747bab130840e # v2.2.0
      with:
        basic-auth: ${{ inputs.gc-basic-auth }}
        hostname: ${{ inputs.gc-host }}
        org-id: ${{ inputs.gc-org-id }}
        this-job-name: ${{ inputs.metrics-job-name }}
      continue-on-error: true
