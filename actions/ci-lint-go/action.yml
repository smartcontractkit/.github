name: ci-lint
description: Lint golang code

inputs:
  # general inputs
  checkout-repo:
    description: "enable git checkout repo"
    required: false
    default: "true"
  checkout-repo-fetch-depth:
    description: "number of commits to fetch"
    required: false
    default: "0"
  # aws inputs
  aws-role-duration-seconds:
    description: ""
    required: false
    default: "900"
  aws-region:
    description: ""
    required: false
  # gati inputs
  use-gati:
    description: ""
    required: false
    default: "false"
  aws-role-arn-gati:
    description: ""
    required: false
  aws-lambda-url-gati:
    description: ""
    required: false
  # env inputs
  use-env-files:
    description: ""
    required: false
    default: "false"
  env-files:
    description: "<env-file-1>|<env-file-2>|..."
    required: false
    default: .env
  # golang inputs
  use-go-cache:
    description: ""
    required: false
    default: "false"
  go-cache-dep-path:
    description: ""
    required: false
    default: go.sum
  go-version-file:
    description: ""
    required: false
    default: go.mod
  golangci-lint-version:
    description: ""
    required: false
    default: latest
  golangci-lint-args:
    description: "Additional args to set for golangci-lint. See inputs.golangci-lint-config
      for config file options."
    required: false
    default: --output.checkstyle.path=golangci-lint-report.xml --output.text.path=stdout
  golangci-lint-config:
    description: "Path to golangci-lint configuration file. If empty, uses the action's default config."
    required: false
  only-new-issues:
    description: "Report only the new issues introduced in your code"
    required: false
    default: "true"
  go-directory:
    description: ""
    default: .

runs:
  using: composite
  steps:
    - name: Checkout repo
      if: inputs.checkout-repo == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.checkout-repo-fetch-depth }}

    - name: Assume aws gati role
      if: inputs.use-gati == 'true'
      uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
      with:
        role-to-assume: ${{ inputs.aws-role-arn-gati }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: true

    - name: Get github token from gati
      if: inputs.use-gati == 'true'
      id: get-gh-token
      uses: smartcontractkit/chainlink-github-actions/github-app-token-issuer@main
      with:
        url: ${{ inputs.aws-lambda-url-gati }}

    - name: Configure github token
      if: inputs.use-gati == 'true'
      shell: bash
      run: |
        git config --global \
          url."https://x-access-token:${{ steps.get-gh-token.outputs.access-token }}@github.com/".insteadOf \
          "https://github.com/"

    - name: Set env from files
      if: inputs.use-env-files == 'true'
      uses: cardinalby/export-env-action@b16a08b396d047e3f9e1446e3946440e2be02a73 # 2.2.2
      with:
        envFile: ${{ inputs.env-files }}

    - name: Setup go
      uses: actions/setup-go@v5
      with:
        go-version-file: ${{ inputs.go-version-file }}
        cache: ${{ inputs.use-go-cache }}
        cache-dependency-path: ${{ inputs.go-cache-dep-path }}

    - name: Set golangci-lint config
      shell: bash
      id: set-config
      env:
        GOLANGCI_LINT_CONFIG: ${{ inputs.golangci-lint-config }}
      run: |
        if [[ -z "${GOLANGCI_LINT_CONFIG}" ]]; then
          echo "config-path=${GITHUB_ACTION_PATH}/files/golangci-default.yml" | tee -a $GITHUB_OUTPUT
        else
          echo "config-path=${GOLANGCI_LINT_CONFIG}" | tee -a $GITHUB_OUTPUT
        fi

    - name: Setup golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
      with:
        version: ${{ inputs.golangci-lint-version }}
        args: >-
          ${{ inputs.golangci-lint-args }}
          --config=${{ steps.set-config.outputs.config-path }}
        working-directory: ${{ inputs.go-directory }}
        only-new-issues: ${{ inputs.only-new-issues }}

    - name: Print lint report artifact
      if: always()
      shell: bash
      env:
        GO_DIR: ${{ inputs.go-directory }}
      run: |
        (test -f "${GO_DIR}/golangci-lint-report.xml" && cat "${GO_DIR}/golangci-lint-report.xml") || true

    - name: Store lint report artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: golangci-lint-report
        path: ${{ inputs.go-directory }}/golangci-lint-report.xml
