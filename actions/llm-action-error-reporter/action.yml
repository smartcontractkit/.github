name: LLM Action Error Reporter
description: "Generates an error report for a failed workflow run using ChatGPT"

# workaround while waiting for https://github.com/actions/runner/issues/886 (gh run view can't run in currently running workflow)
inputs:
  parent-workflow-conclusion:
    description:
      "The conclusion status of the parent workflow: either 'success' or
      'failure'"
    required: true
  edit-comment:
    description: "Whether to edit the last comment or create a new one"
    required: false
  pr-comment-identifier:
    description: "Comment string identifier used to find the PR comment to edit"
    required: false
    default: "<!-- llm-action-error-reporter -->"
  gh-token:
    description: "github token to make a comment with"
    required: true
  openai-model:
    description: "openai model. defaults to 'gpt-4-turbo-2024-04-09'"
    required: false
    default: "gpt-4-turbo-2024-04-09"
  openai-api-key:
    description: "openai api key"
    required: true
  workflow-ref:
    description: "ref of the workflow to checkout"
    required: false
    default: "main"
  # grafana inputs (optional)
  metrics-job-name:
    description: "grafana metrics job name"
    required: false
  metrics-id:
    description:
      "grafana metrics id, used for continuity of metrics during job name
      changes - required if metrics-job-name is passed"
    required: false
  gc-host:
    description: "grafana hostname - required if metrics-job-name is passed"
    required: false
  gc-basic-auth:
    description: "grafana basic auth - required if metrics-job-name is passed"
    required: false
  gc-org-id:
    description:
      "grafana org/tenant id - required if metrics-job-name is passed"
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout calling repo
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Check if this run is invoked from a pull request event
      shell: bash
      if: github.event.workflow_run.event == 'pull_request'
      run: echo "SKIP_ACTION=false" >> $GITHUB_ENV

    - name: Get PR number
      if: ${{ env.SKIP_ACTION == 'false' }}
      id: get_pr_number
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
      run: |
        echo "workflow_run event: ${{ github.event.workflow_run.event }}"

        # Convert pull_requests array to JSON string and get pr_number from the first object
        pull_requests_json='${{ toJson(github.event.workflow_run.pull_requests) }}'
        echo "pr_number="$(echo "$pull_requests_json" | jq '.[0].number')"" >> "$GITHUB_OUTPUT"

    - name: Prepare logs
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion ==
        'failure' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
      run: |
        echo "Analyzing run ${{ github.event.workflow_run.id }}"
        gh run view ${{ github.event.workflow_run.id }} --log-failed | jq -Rs . | sed 's/^"//;s/"$//' > runlog.log

    - name: Checkout action repo
      if: ${{ env.SKIP_ACTION == 'false' }}
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        repository: smartcontractkit/.github
        ref: ${{ inputs.workflow-ref }}
        path: "error_reporter_actions"
        # prevents access to any other action and workflow files
        sparse-checkout: |
          actions/llm-action-error-reporter/log-analyze-prompt.md
        sparse-checkout-cone-mode: false
        fetch-depth: 1

    - name: Call ChatGPT
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion ==
        'failure' }}
      shell: bash
      run: |
        log_output=$(cat runlog.log | sed -e 's/\\ No newline at end of file//g' | sed -E 's/\\+$//g' | sed -E 's/\\+ //g')
        openai_prompt=$(cat error_reporter_actions/actions/llm-action-error-reporter/log-analyze-prompt.md | sed 's/"/\\"/g' | sed -E 's/\\+$//g' | sed -E 's/\\+ //g')
        openai_model=${{ inputs.openai-model }}
        openai_result=$(echo '{
          "model": "'$openai_model'",
          "temperature": 0.1,
          "messages": [
            {
              "role": "system",
              "content": "'$openai_prompt' \n\n```'$log_output'```"
            }
          ]
        }' | envsubst | curl https://api.openai.com/v1/chat/completions \
                      -w "%{http_code}" \
                      -o prompt_response.json \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${{ inputs.openai-api-key }}" \
                      -d @-
        )

        # throw error openai_result when is not 200
        if [[ "$openai_result" != '200' ]]; then
          echo "::error::OpenAI API call failed with status $openai_result: $(cat prompt_response.json)"
          exit 1
        fi

        # replace lines starting with ' -' (1space) with '  -' (2spaces)
        response_content=$(cat prompt_response.json | jq -r '.choices[0].message.content')
        echo "$response_content" | sed -e 's/^ -/  -/g' > chatgpt_output.txt

    - name: Generate Error Report
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion ==
        'failure' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER: ${{ steps.get_pr_number.outputs.pr_number }}
        edit_comment: ${{ inputs.edit-comment }}
      run: |
        workflow_name=$(gh run view ${{ github.event.workflow_run.id }} --json workflowName --jq '.workflowName')
        head_sha=$(gh run view ${{ github.event.workflow_run.id }} --json headSha --jq '.headSha')
        short_sha=$(echo $head_sha | cut -c1-7)
        repo_url=$(gh repo view --json url --jq '.url')

        pr_message="${{ inputs.pr-comment-identifier }}
        **Below is an analysis created by an LLM. Be mindful of hallucinations and verify accuracy.**

        ## WF: $workflow_name[#$short_sha]($repo_url/commit/$head_sha)

        Workflow run ID: [${GITHUB_RUN_ID}](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#${GITHUB_JOB})

        $(cat chatgpt_output.txt)"

        # Fetch last comment ID we made by this action (if applicable).
        comment_id=$(gh pr view $PR_NUMBER --json comments \
          --jq '.comments[] | select(.author.login == "github-actions" and (.body | contains("${{ inputs.pr-comment-identifier }}"))) | .id')

        if [[ -n "${comment_id:-}" && "$edit_comment" == "true" ]]; then
          # Update the existing comment.
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${GITHUB_REPOSITORY}/issues/comments/$comment_id \
            -f body="$pr_message"
        else
          # Post a new comment.
          gh pr comment $PR_NUMBER -b "$pr_message"
        fi

    - name: Generate Success Report
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion !=
        'failure' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER: ${{ steps.get_pr_number.outputs.pr_number }}
        edit_comment: ${{ inputs.edit-comment }}
      run: |
        workflow_name=$(gh run view ${{ github.event.workflow_run.id }} --json workflowName --jq '.workflowName')
        head_sha=$(gh run view ${{ github.event.workflow_run.id }} --json headSha --jq '.headSha')
        short_sha=$(echo $head_sha | cut -c1-7)
        repo_url=$(gh repo view --json url --jq '.url')

        pr_message="${{ inputs.pr-comment-identifier }}
        ## WF: $workflow_name[#$short_sha]($repo_url/commit/$head_sha)

        Workflow run ID: [${GITHUB_RUN_ID}](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#${GITHUB_JOB})

        No errors found in this run. ðŸŽ‰"

        # Fetch last comment ID we made by this action (if applicable).
        comment_id=$(gh pr view $PR_NUMBER --json comments \
          --jq '.comments[] | select(.author.login == "github-actions" and (.body | contains("${{ inputs.pr-comment-identifier }}"))) | .id')

        if [[ -n "${comment_id:-}" && "$edit_comment" == "true" ]]; then
          # Update the existing comment.
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${GITHUB_REPOSITORY}/issues/comments/$comment_id \
            -f body="$pr_message"
        else
          # Post a new comment.
          gh pr comment $PR_NUMBER -b "$pr_message"
        fi

    - name: Collect metrics
      if: always() && inputs.metrics-job-name != ''
      id: collect-gha-metrics
      uses: smartcontractkit/push-gha-metrics-action@d9da21a2747016b3e13de58c7d4115a3d5c97935 # v3.0.1
      with:
        id: ${{ inputs.metrics-id || inputs.metrics-job-name }}
        basic-auth: ${{ inputs.gc-basic-auth }}
        hostname: ${{ inputs.gc-host }}
        org-id: ${{ inputs.gc-org-id}}
        this-job-name: ${{ inputs.metrics-job-name }}
      continue-on-error: true
