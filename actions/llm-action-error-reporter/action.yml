name: LLM Action Error Reporter
description: |
  Action Error Reporter is designed to report errors from a parent workflow.
  It uses ChatGPT to analyze the logs and generate a report that is posted as a
  comment on the PR that triggered the parent workflow.
# workaround while waiting for https://github.com/actions/runner/issues/886 (gh run view can't run in currently running workflow)
inputs:
  parent-workflow-conclusion:
    description:
      "The conclusion status of the parent workflow: either 'success' or
      'failure'"
    type: string
    required: true
  skip-on-success:
    description:
      "Whether to skip the action if the parent workflow is successful"
    required: false
    type: boolean
    default: false
  gh-token:
    description: "github token to make a comment with"
    type: string
    required: true
  openai-model:
    description: "openai model. defaults to 'gpt-4o-2024-05-13'"
    required: false
    default: "gpt-4o-2024-05-13"
    type: string
  openai-api-key:
    description: "openai api key"
    type: string
    required: true
  workflow-ref:
    description: "ref of the workflow to checkout"
    required: false
    default: "main"
  log-lines-limit:
    description: "The maximum number of log lines to process per group"
    required: false
    default: "500"

runs:
  using: "composite"
  steps:
    - name: Checkout calling repo
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Check if this run is invoked from a pull request event
      shell: bash
      if: >
        github.event.workflow_run.event == 'pull_request'
      run: |
        echo "SKIP_ACTION=false" >> $GITHUB_ENV

    - name: Get PR number
      if: ${{ env.SKIP_ACTION == 'false' }}
      id: get_pr_number
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
      run: |
        echo "workflow_run event: ${{ github.event.workflow_run.event }}"

        # Convert pull_requests array to JSON string and get pr_number from the first object
        pull_requests_json='${{ toJson(github.event.workflow_run.pull_requests) }}'
        pr_number=$(echo "$pull_requests_json" | jq -r '.[0].number')
        echo "pr_number=$pr_number" >> "$GITHUB_OUTPUT"

    - name: Checkout action repo
      if: ${{ env.SKIP_ACTION == 'false' }}
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        repository: smartcontractkit/.github
        ref: ${{ inputs.workflow-ref }}
        path: "error_reporter_actions"
        # prevents access to any other action and workflow files
        sparse-checkout: |
          actions/llm-action-error-reporter/log-analyze-prompt.md
          actions/llm-action-error-reporter/update_pr_comment.sh
          actions/llm-action-error-reporter/trim_logs.sh
        sparse-checkout-cone-mode: false
        fetch-depth: 1

    - name: Prepare logs
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion ==
        'failure' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        LINE_LIMIT: ${{ inputs.log-lines-limit }}
      run: |
        echo "Analyzing run ${{ github.event.workflow_run.id }}"
        LOG_RAW=$(gh run view ${{ github.event.workflow_run.id }} --log-failed)
        echo "$LOG_RAW" > rawlog.log

        # trim logs and outputs to runlog.log
        ./error_reporter_actions/actions/llm-action-error-reporter/trim_logs.sh

    - name: Call ChatGPT
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion ==
        'failure' }}
      shell: bash
      run: |
        # processes the contents of runlog.log  and prompt: converts to raw string, removes leading and trailing quotes, and cleans up known problematic patterns.
        # this helps prepare both prompt and log content for the OpenAI API call
        log_output=$(cat runlog.log | jq -Rs . | sed 's/^"//;s/"$//' | sed -e 's/\\ No newline at end of file//g' | sed -E 's/\\+$//g' | sed -E 's/\\+ //g')
        openai_prompt=$(cat error_reporter_actions/actions/llm-action-error-reporter/log-analyze-prompt.md | sed 's/"/\\"/g' | sed -E 's/\\+$//g' | sed -E 's/\\+ //g')
        openai_model=${{ inputs.openai-model }}
        openai_result=$(echo '{
          "model": "'$openai_model'",
          "temperature": 0.1,
          "messages": [
            {
              "role": "system",
              "content": "'$openai_prompt' \n\n```'$log_output'```"
            }
          ]
        }' | envsubst | curl https://api.openai.com/v1/chat/completions \
                      -w "%{http_code}" \
                      -o prompt_response.json \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${{ inputs.openai-api-key }}" \
                      -d @-
        )

        # throw error openai_result when is not 200
        if [[ "$openai_result" != '200' ]]; then
          echo "::error::OpenAI API call failed with status $openai_result: $(cat prompt_response.json)"
          exit 1
        fi

        # replace lines starting with ' -' (1space) with '  -' (2spaces)
        response_content=$(cat prompt_response.json | jq -r '.choices[0].message.content')
        echo "$response_content" | sed -e 's/^ -/  -/g' > chatgpt_output.txt

    - name: Generate Error Report
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion ==
        'failure' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER: ${{ steps.get_pr_number.outputs.pr_number }}
        OPENAI_MODEL: ${{ inputs.openai-model }}
      run: |
        export WORKFLOW_NAME=$(gh run view ${{ github.event.workflow_run.id }} --json workflowName --jq '.workflowName')
        export HEAD_SHA=$(gh run view ${{ github.event.workflow_run.id }} --json headSha --jq '.headSha')
        export REPO_URL=$(gh repo view --json url --jq '.url')
        export WF_JOB_URLS=$(gh run view ${{ github.event.workflow_run.id }} --json jobs --jq '.jobs | map("[\(.name)](\(.url))") | join(" , ")')
        export AER_JOB_URLS=$(gh run view $GITHUB_RUN_ID --json jobs --jq '.jobs | map("[aer_workflow](\(.url))") | join(" , ")')
        export WORKFLOW_ID=$(echo "$WORKFLOW_NAME" | tr -d ' ' | tr '[:upper:]' '[:lower:]')

        export PR_MESSAGE="
        <$WORKFLOW_ID>

        ## AER Report: [$WORKFLOW_NAME]($REPO_URL/actions/runs/${{ github.event.workflow_run.id }})

        $AER_JOB_URLS , [commit]($REPO_URL/commit/$HEAD_SHA) , $WF_JOB_URLS

        $(cat chatgpt_output.txt)
        </$WORKFLOW_ID>"

        # post the error report to the PR
        ./error_reporter_actions/actions/llm-action-error-reporter/update_pr_comment.sh

    - name: Generate Success Report
      if:
        ${{ env.SKIP_ACTION == 'false' && inputs.parent-workflow-conclusion !=
        'failure' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        PR_NUMBER: ${{ steps.get_pr_number.outputs.pr_number }}
        SKIP_ON_SUCCESS: ${{ inputs.skip-on-success }}
      run: |
        export WORKFLOW_NAME=$(gh run view ${{ github.event.workflow_run.id }} --json workflowName --jq '.workflowName')
        export HEAD_SHA=$(gh run view ${{ github.event.workflow_run.id }} --json headSha --jq '.headSha')
        export REPO_URL=$(gh repo view --json url --jq '.url')
        export WF_JOB_URLS=$(gh run view ${{ github.event.workflow_run.id }} --json jobs --jq '.jobs | map("[\(.name)](\(.url))") | join(" , ")')
        export AER_JOB_URLS=$(gh run view $GITHUB_RUN_ID --json jobs --jq '.jobs | map("[aer_workflow](\(.url))") | join(" , ")')
        export WORKFLOW_ID=$(echo "$WORKFLOW_NAME" | tr -d ' ' | tr '[:upper:]' '[:lower:]')

        export PR_MESSAGE="
        <$WORKFLOW_ID>

        ## AER Report: [$WORKFLOW_NAME]($REPO_URL/actions/runs/${{ github.event.workflow_run.id }}) ran successfully :white_check_mark:

        $AER_JOB_URLS , [commit]($REPO_URL/commit/$HEAD_SHA)

        </$WORKFLOW_ID>"

        # post the error report to the PR
        ./error_reporter_actions/actions/llm-action-error-reporter/update_pr_comment.sh
