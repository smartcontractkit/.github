name: ctf-setup-run-tests-environment
description: "Common test env setup for CTF"

inputs:
  test_download_vendor_packages_command:
    required: false
    description: The command to download the go modules
    default: make download
  go_version:
    required: false
    description: Go version to install
  go_mod_path:
    required: false
    description: The go.mod file path
    default: "go.mod"
  go_necessary:
    required: false
    description:
      Whether to install go, should be true unless you already have a test
      binary
    default: "true"
  cache_restore_only:
    required: false
    description:
      Only restore the cache, set to true if you want to restore and save on
      cache hit miss
    default: "false"
  cache_key_id:
    required: false
    description: Cache go vendors unique id
    default: go
  aws_registries:
    required: false
    description: AWS registries to log into for the test if needed
  aws_role_duration_seconds:
    required: false
    default: "3600"
    description: The duration to be logged into the aws role for
  dockerhub_username:
    description:
      Username for Docker Hub to avoid rate limits when pulling public images
    required: false
  dockerhub_password:
    description:
      Password for Docker Hub to avoid rate limits when pulling public images
    required: false
  QA_AWS_REGION:
    required: true
    description: The AWS region to use
  QA_AWS_ROLE_TO_ASSUME:
    required: true
    description: The AWS role to assume
  PROD_AWS_REGION:
    required: false
    description: The AWS region to use for prod ECR
  PROD_AWS_ROLE_TO_ASSUME:
    required: false
    description: The AWS role to assume for prod ECR
  QA_KUBECONFIG:
    required: false
    description: The kubernetes configuration to use
  should_tidy:
    required: false
    description: Should we check go mod tidy
    default: "true"
  no_cache:
    required: false
    description: Do not use a go cache
    default: "false"
  gauntlet_plus_plus_image:
    required: false
    description: Gauntlet-plus-plus image link
  prod_aws_account_number:
    required: false
    description: AWS Account number that holds the gauntlet_plus_plus 
  gati_token:
    required: false
    description: Token provided by GATI to pull from private repos
  enable-gap:
    required: false
    default: "true"
    description: Configure and enable GAP for accessing internal services.
  main-dns-zone:
    required: false
    default: ""
    description:
      The primary DNS zone used in the hostname of the Kubernetes API endpoint.
      Required if GAP is enabled.
  k8s-cluster-name:
    required: false
    default: ""
    description:
      The name of the Kubernetes cluster to be used in the `kubectl`
      configuration for accessing the desired cluster.
  enable-proxy-debug:
    description:
      "Enable or disable detailed Envoy proxy logs used for K8s API access. When
      enabled, debug logs are generated locally, and container logs are streamed
      to the console for troubleshooting."
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Validate GAP inputs
      shell: bash
      if: inputs.enable-gap == 'true'
      run: |
        if [ -z "${{ inputs.main-dns-zone }}" ]; then
          echo "Error: main-dns-zone is required when enable-gap is true."
          exit 1
        fi
        if [ -z "${{ inputs.k8s-cluster-name }}" ]; then
          echo "Error: k8s-cluster-name is required when enable-gap is true."
          exit 1
        fi
    # Go setup and caching
    - name: Setup Go
      if: inputs.go_necessary == 'true'
      uses: smartcontractkit/.github/actions/ctf-setup-go@c83a1867f404a79db873b55f1a5fd30b42569bbb # ctf-setup-go@0.2.0
      with:
        go_version: ${{ inputs.go_version }}
        go_mod_path: ${{ inputs.go_mod_path }}
        cache_restore_only: ${{ inputs.cache_restore_only }}
        cache_key_id: ${{ inputs.cache_key_id }}
        should_tidy: ${{ inputs.should_tidy }}
        no_cache: ${{ inputs.no_cache }}
        test_download_vendor_packages_command:
          ${{ inputs.test_download_vendor_packages_command }}
        gati_token: ${{ inputs.gati_token }}

    # Setup Gauntlet plus plus
    - name: Setup gauntlet plus plus
      if: inputs.gauntlet_plus_plus_image
      uses: smartcontractkit/.github/actions/ctf-setup-gauntlet-plus-plus@c5420f0c8a0386c0ce7af20c09381384fb5fa1ca # ctf-setup-gauntlet-plus-plus@0.0.1
      with:
        docker_username: ${{ inputs.docker_username }}
        docker_password: ${{ inputs.docker_password }}
        PROD_AWS_REGION: ${{ inputs.PROD_AWS_REGION }}
        PROD_AWS_ROLE_TO_ASSUME: ${{ inputs.PROD_AWS_ROLE_TO_ASSUME }}
        gauntlet_plus_plus_image: ${{ inputs.gauntlet_plus_plus_image }}
        aws_account_number: ${{ inputs.prod_aws_account_number }}

    # Setup AWS cred and K8s context
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
      with:
        aws-region: ${{ inputs.QA_AWS_REGION }}
        role-to-assume: ${{ inputs.QA_AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: ${{ inputs.aws_role_duration_seconds }}
        mask-aws-account-id: true

    - name: Configure local GAP proxy for accessing (Kubernetes) services
      uses: smartcontractkit/.github/actions/setup-gap@858d6785a9cce58359f5d6f9481902f2d0a331ac # setup-gap@4.0.1
      if: inputs.enable-gap == 'true'
      with:
        aws-region: ${{ inputs.QA_AWS_REGION }}
        aws-role-arn: ${{ inputs.QA_AWS_ROLE_TO_ASSUME }}
        aws-role-duration-seconds: 3600 # 1 hour
        gap-name: k8s
        k8s-cluster-name: ${{ inputs.k8s-cluster-name }}
        main-dns-zone: ${{ inputs.main-dns-zone }}
        proxy-port: 9339
        use-k8s: true
        enable-proxy-debug: ${{ inputs.enable-proxy-debug }}

    # Login to AWS ECR registries if needed
    - name: Login to Amazon ECR
      if: inputs.aws_registries && inputs.QA_AWS_REGION
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        registries: ${{ inputs.aws_registries }}
      env:
        AWS_REGION: ${{ inputs.QA_AWS_REGION }}

    # To avoid rate limiting from Docker Hub, we can login with a paid user account.
    - name: Login to Docker Hub
      if: inputs.dockerhub_username && inputs.dockerhub_password
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    # Helm Setup
    - uses: azure/setup-helm@29960d0f5f19214b88e1d9ba750a9914ab0f1a2f # v4.0.0
      with:
        version: v3.13.1
    - name: Add required helm charts including chainlink-qa
      shell: bash
      run: |
        helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami
        helm repo add chainlink-qa https://raw.githubusercontent.com/smartcontractkit/qa-charts/gh-pages/

    # Display tool versions
    - name: Tool Versions
      shell: bash
      run: |
        go version
        aws --version
        helm version
        helm repo list
