name: "Setup CRIB Environment"
description:
  "Composite action for deploying a CRIB, setting up GAP, Nix, and deploying to
  an ephemeral environment."

inputs:
  api-gateway-host:
    description: "API Gateway host for GAP, used to access the Kubernetes API."
    required: true
  aws-region:
    description: "AWS region."
    required: true
  aws-role-arn:
    description: "AWS Role ARN to be used for setting up GAP."
    required: true
  devspace-ingress-cidrs:
    default: "0.0.0.0/0"
    description: "DevSpace ingress CIDRs."
    required: false
  devspace-profiles:
    default: ""
    description: |
      "Comma-separated list of DevSpace profiles to apply when running DevSpace commands.
      Example: ci,values-dev-simulated-core-ocr1."
    required: false
  ecr-private-registry:
    default: ""
    description:
      "ECR private registry account ID in Production, needed for GAP."
    required: false
  ecr-private-registry-stage:
    default: ""
    description: "ECR private registry account ID in Staging."
    required: false
  github-token:
    description: "The `GITHUB_TOKEN` issued for the workflow."
    default: ${{ github.token }}
    required: false
  image-tag:
    default: "latest"
    description: "Docker image tag for the product."
    required: false
  ingress-base-domain:
    description: "DevSpace ingress base domain."
    required: true
  k8s-cluster-name:
    description: "Kubernetes cluster name."
    required: true
  ns-ttl:
    default: "1h"
    description:
      "Namespace TTL, which defines how long a namespace will remain alive after
      creation."
    required: false
  product:
    default: "core"
    description: "The name of the product (e.g., core, ccip)."
    required: false

outputs:
  devspace-namespace:
    description: "Kubernetes namespace used to provision a CRIB environment."
    value: ${{ steps.generate-ns-name.outputs.devspace-namespace }}

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        # Validate product input
        case "${{ inputs.product }}" in
          "core"|"ccip")
            echo "Product input is valid: ${{ inputs.product }}"
            ;;
          *)
            echo "Invalid product input: ${{ inputs.product }}. Must be 'core' or 'ccip'."
            exit 1
            ;;
        esac

    - name: Setup GAP
      uses: smartcontractkit/.github/actions/setup-gap@d316f66b2990ea4daa479daa3de6fc92b00f863e # setup-gap@0.3.2
      with:
        checkout-repo: false
        aws-role-arn: ${{ inputs.aws-role-arn }}
        api-gateway-host: ${{ inputs.api-gateway-host }}
        aws-region: ${{ inputs.aws-region }}
        ecr-private-registry: ${{ inputs.ecr-private-registry }}
        k8s-cluster-name: ${{ inputs.k8s-cluster-name }}
        use-private-ecr-registry: true
        use-k8s: true
        # Choose port that is less likely to be conflicting with other GAP
        # instances that runs in the same workflow
        proxy-port: 8888
        gc-basic-auth: ${{ inputs.gc-basic-auth }}
        gc-host: ${{ inputs.gc-host }}
        gc-org-id: ${{ inputs.gc-org-id }}

    - name: Checkout crib repo
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      with:
        repository: "smartcontractkit/crib"
        ref: "main"
        path: "${{ github.workspace }}/crib"
        token: ${{ inputs.github-token }}

    - name: Setup Nix
      uses: smartcontractkit/.github/actions/setup-nix@4df907a307d91761c15cdff65e508145bdbcfca3 # setup-nix@0.3.0
      with:
        cache-pubkey: ${{ inputs.cache-pubkey }}
        enable-aws: true
        aws-region: ${{ inputs.aws-region }}

    - name: Generate CRIB Namespace Name and labels
      id: generate-ns-name
      shell: bash
      run: |
        echo "devspace-namespace=crib-ci-$(uuidgen | cut -c1-5)" >> $GITHUB_OUTPUT
        # This will work only for PRs, push event itself does not contain PR information.
        echo "pr-number=${{ github.event.number }}" >> $GITHUB_OUTPUT
        echo "workflow-job=${{ github.job }}" >> $GITHUB_OUTPUT
        echo "repo-name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT
        echo "branch-name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "workflow-run-number=${{ github.run_number }}" >> $GITHUB_OUTPUT

    - name: Crate and label CRIB namespace
      shell: bash
      run: |
        NAMESPACE="${{ steps.generate-ns-name.outputs.devspace-namespace }}"
        echo "Creating $NAMESPACE Kubernetes namespace.."
        kubectl create ns "$NAMESPACE"

        kubectl label namespace $NAMESPACE \
          repo=${{ steps.generate-ns-name.outputs.repo-name }} \
          branch=${{ steps.generate-ns-name.outputs.branch-name }} \
          commit=${{ steps.generate-ns-name.outputs.commit-sha }} \
          pr-number=${{ steps.generate-ns-name.outputs.pr-number || 'none' }} \
          workflow-job=${{ steps.generate-ns-name.outputs.workflow-job }} \
          workflow-run-number=${{ steps.generate-ns-name.outputs.workflow-run-number }}

        echo "Kubernetes namespace [$NAMESPACE] successfully labeled:"
        kubectl get namespace $NAMESPACE --show-labels

    - name: Deploy to CRIB ephemeral environment
      working-directory:
        ${{ github.workspace }}/crib/deployments/${{ inputs.product }}
      shell: bash
      env:
        CHAINLINK_CODE_DIR: "../"
        CRIB_CI_ENV: true
        CRIB_SKIP_DOCKER_ECR_LOGIN: true
        CRIB_SKIP_HELM_ECR_LOGIN: true
        DEVSPACE_IMAGE:
          "${{ inputs.ecr-private-registry-stage
          }}.dkr.ecr.us-west-2.amazonaws.com/chainlink-devspace"
        DEVSPACE_INGRESS_BASE_DOMAIN: ${{ inputs.ingress-base-domain }}
        DEVSPACE_INGRESS_CIDRS: ${{ inputs.devspace-ingress-cidrs }}
        PROFILES: ${{ inputs.devspace-profiles }}
        KUBECACHEDIR: /dev/null
        NS_TTL: ${{ inputs.ns-ttl }}
        SETUP_AWS_PROFILE: false
        SETUP_EKS_CONFIG: false
      run: |
        echo "Working directory: $(pwd)"

        # Get the namespace name from GitHub Actions output
        NAMESPACE="${{ steps.generate-ns-name.outputs.devspace-namespace }}"
        echo "Using $NAMESPACE Kubernetes namespace"

        # Kyverno needs some time to inject the RoleBinding
        sleep 3

        # Check if product is ccip and set ATLAS_ENABLED accordingly
        if [[ "${{ inputs.product }}" == "ccip" ]]; then
          export ATLAS_ENABLED=true
        fi

        nix develop -c ./cribbit.sh "$NAMESPACE"

        profile_args_array=()
        if [[ -n "$PROFILES" ]]; then
          # Convert comma-separated string to array
          IFS=',' read -r -a profiles_array <<< "$PROFILES"

          for profile in "${profiles_array[@]}"; do
            profile_args_array+=("-p")
            profile_args_array+=("$profile")
          done
          echo "running devspace with profile args: ${profile_args_array[@]}"
        fi

        nix develop -c devspace deploy --skip-build -o=${{ inputs.image-tag }} "${profile_args_array[@]}"
