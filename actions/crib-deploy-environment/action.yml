name: "Setup CRIB Environment"
description:
  "Composite action for deploying a CRIB, setting up GAP, Nix, and deploying to
  an ephemeral environment."

inputs:
  api-gateway-host:
    description: "API Gateway host for GAP, used to access the Kubernetes API."
    required: true
  aws-region:
    description: "AWS region."
    required: true
  aws-role-arn:
    description: "AWS Role ARN to be used for setting up GAP."
    required: true
  devspace-ingress-cidrs:
    default: "0.0.0.0/0"
    description: "DevSpace ingress CIDRs."
    required: false
  ecr-private-registry:
    default: ""
    description:
      "ECR private registry account ID in Production, needed for GAP."
    required: false
  github-token:
    description:
      "The `GITHUB_TOKEN` issued for the workflow. It is required unless the
      action is called from the crib repo."
    default: ${{ github.token }}
    required: false
  ingress-base-domain:
    description: "DevSpace ingress base domain."
    required: true
  k8s-cluster-name:
    description: "Kubernetes cluster name."
    required: true
  ns-ttl:
    default: "1h"
    description:
      "Namespace TTL, which defines how long a namespace will remain alive after
      creation."
    required: false
  command:
    default: "core"
    description: "The devspace command to run."
    required: false
  command-args:
    default: "--skip-build"
    description: "The arguments to pass to the devspace command."
    required: false
  product-image:
    required: false
    description:
      "Docker image without tag e.g public.ecr.aws/chainlink/chainlink"
    default: public.ecr.aws/chainlink/chainlink
  product-image-tag:
    default: "latest"
    description: "Docker image tag for the product."
    required: false
  send-alerts:
    default: "true"
    description: |
      Send slack alerts when CRIB provisioning fails.
      When enabled it requires to provide crib-alert-slack-webhook parameter as well.
  crib-alert-slack-webhook:
    default: ""
    description: |
      The URL of the slack webhook which should be used for sending alerts.
      for example: https://hooks.slack.com/services/aaa/bbb
    required: false
  crib-repo-ref:
    default: "main"
    required: false
    description: Useful for testing updates in CRIB
outputs:
  devspace-namespace:
    description: "Kubernetes namespace used to provision a CRIB environment."
    value: ${{ steps.generate-ns-name.outputs.devspace-namespace }}

runs:
  using: "composite"
  steps:
    - name: Setup GAP
      uses: smartcontractkit/.github/actions/setup-gap@d316f66b2990ea4daa479daa3de6fc92b00f863e # setup-gap@0.3.2
      with:
        checkout-repo: false
        aws-role-arn: ${{ inputs.aws-role-arn }}
        api-gateway-host: ${{ inputs.api-gateway-host }}
        aws-region: ${{ inputs.aws-region }}
        ecr-private-registry: ${{ inputs.ecr-private-registry }}
        k8s-cluster-name: ${{ inputs.k8s-cluster-name }}
        use-private-ecr-registry: true
        use-k8s: true
        # Choose port that is less likely to be conflicting with other GAP
        # instances that runs in the same workflow
        proxy-port: 8888
        gc-basic-auth: ${{ inputs.gc-basic-auth }}
        gc-host: ${{ inputs.gc-host }}
        gc-org-id: ${{ inputs.gc-org-id }}

    - name: Checkout crib repo
      uses: actions/checkout@v4.2.1
      with:
        repository: "smartcontractkit/crib"
        ref: ${{ inputs.crib-repo-ref }}
        path: "${{ github.workspace }}/crib"
        token: ${{ inputs.github-token }}

    - uses: actions/setup-go@v5
      with:
        go-version-file: "${{ github.workspace }}/crib/go.work"
        cache-dependency-path: "${{ github.workspace }}/crib/**/*.sum"

    - name: Setup Nix
      uses: smartcontractkit/.github/actions/setup-nix@4df907a307d91761c15cdff65e508145bdbcfca3 # setup-nix@0.3.0
      with:
        cache-pubkey: ${{ inputs.cache-pubkey }}
        enable-aws: true
        aws-region: ${{ inputs.aws-region }}

    - name: Generate CRIB Namespace Name and labels
      id: generate-ns-name
      shell: bash
      run: |
        echo "devspace-namespace=crib-ci-$(uuidgen | cut -c1-5)" >> $GITHUB_OUTPUT
        # This will work only for PRs, push event itself does not contain PR information.
        echo "pr-number=${{ github.event.number }}" >> $GITHUB_OUTPUT
        echo "workflow-job=${{ github.job }}" >> $GITHUB_OUTPUT
        echo "repo-name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT
        echo "branch-name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "workflow-run-number=${{ github.run_number }}" >> $GITHUB_OUTPUT

    - name: Create and label CRIB namespace
      shell: bash
      run: |
        # a valid label must be an empty string or consist of alphanumeric characters,
        # ‘-’, ‘_’ or ‘.’, and must start and end with an alphanumeric character
        # (e.g. ‘MyValue’,  or ‘my_value’,  or ‘12345’, regex used for validation is
        # ‘(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?’)
        sanitized_branch=$(echo "${{ steps.generate-ns-name.outputs.branch-name }}" \
          | sed 's/[^a-zA-Z0-9._-]/_/g' | cut -c1-63 | sed 's/[._-]$//')

        NAMESPACE="${{ steps.generate-ns-name.outputs.devspace-namespace }}"
        echo "Creating $NAMESPACE Kubernetes namespace.."
        kubectl create ns "$NAMESPACE"

        kubectl label namespace $NAMESPACE \
          repo=${{ steps.generate-ns-name.outputs.repo-name }} \
          branch="${sanitized_branch}" \
          commit=${{ steps.generate-ns-name.outputs.commit-sha }} \
          pr-number=${{ steps.generate-ns-name.outputs.pr-number || 'none' }} \
          workflow-job=${{ steps.generate-ns-name.outputs.workflow-job }} \
          workflow-run-number=${{ steps.generate-ns-name.outputs.workflow-run-number }}

        kubectl label namespace --overwrite=true $NAMESPACE \
          cleanup.kyverno.io/ttl=${{ inputs.ns-ttl }}

        echo "Kubernetes namespace [$NAMESPACE] successfully labeled:"
        kubectl get namespace $NAMESPACE --show-labels

    - name: Deploy to CRIB ephemeral environment
      working-directory: ${{ github.workspace }}/crib/deployments/chainlink
      shell: bash
      env:
        CHAINLINK_CODE_DIR: "../"
        CRIB_CI_ENV: true
        CRIB_SKIP_DOCKER_ECR_LOGIN: true
        CRIB_SKIP_HELM_ECR_LOGIN: true
        DEVSPACE_IMAGE: "${{inputs.product-image}}"
        DEVSPACE_IMAGE_TAG: "${{inputs.product-image-tag}}"
        DEVSPACE_INGRESS_BASE_DOMAIN: ${{ inputs.ingress-base-domain }}
        DEVSPACE_INGRESS_CIDRS: ${{ inputs.devspace-ingress-cidrs }}
        GH_TOKEN: ${{ inputs.github-token }}
        PROFILES: ${{ inputs.devspace-profiles }}
        KUBECACHEDIR: /dev/null
        SETUP_AWS_PROFILE: false
        SETUP_EKS_CONFIG: false
      run: |
        echo "Working directory: $(pwd)"

        # Get the namespace name from GitHub Actions output
        export DEVSPACE_NAMESPACE="${{ steps.generate-ns-name.outputs.devspace-namespace }}"
        echo "Using $DEVSPACE_NAMESPACE Kubernetes namespace"

        nix develop -c /bin/bash -c "devspace use namespace ${DEVSPACE_NAMESPACE} && devspace run ${{ inputs.command }} ${{ inputs.command-args }}"

    - name: Render notification template
      uses: actions/github-script@v7.0.1
      id: render-slack-template
      if:
        failure() && inputs.crib-alert-slack-webhook != '' && inputs.send-alerts
        == 'true'
      with:
        script: |
          const {GITHUB_SERVER_URL, GITHUB_REPOSITORY, GITHUB_RUN_ID, GITHUB_ACTOR} = process.env;
          const workflowRunUrl = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`;

          payload = {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":red_circle: *Failed to provision CRIB environment for ${{ inputs.command}}*"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": `<${workflowRunUrl}|Workflow Run>
          Git Repo: ${GITHUB_REPOSITORY}
          Github Actor: ${GITHUB_ACTOR}`
                }
              }
            ]
          };
          return JSON.stringify(payload);

    - name: Notify CRIB team on failure
      if:
        failure() && inputs.crib-alert-slack-webhook != '' && inputs.send-alerts
        == 'true'
      id: slack
      uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e # v1.26.0
      with:
        # For posting a rich message using Block Kit
        payload: ${{ steps.render-slack-template.outputs.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.crib-alert-slack-webhook }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
