name: "Setup CRIB Environment"
description:
  "Composite action for deploying a CRIB, setting up GAP, Nix, and deploying to
  an ephemeral environment."

inputs:
  api-gateway-host:
    description: API Gateway host for K8s
    required: true
  aws-region:
    description: AWS region
    required: true
  aws-role-arn:
    description: AWS Role ARN for CRIB
    required: true
  devspace-ingress-cidrs:
    default: 0.0.0.0/0
    description: DevSpace ingress CIDRs
    required: false
  devspace-profiles:
    default: ""
    required: false
    description: |
      Coma separated list of devspace profiles to apply when running devspace commands.
      Example: ci,values-dev-simulated-core-ocr1
  ecr-private-registry:
    default: ""
    description: ECR private registry account ID in Prod, needed for GAP
    required: false
  ecr-private-registry-stage:
    default: ""
    description: ECR private registry account ID in Staging
    required: false
  github-token:
    description: "The `GITHUB_TOKEN` issued for the workflow."
    required: false
    default: ${{ github.token }}
  image-tag:
    default: latest
    description: Docker image tag for the product
    required: false
  ingress-base-domain:
    description: DevSpace ingress base domain
    required: true
  k8s-cluster-name:
    description: K8s cluster name
    required: true
  kube-cache-dir:
    default: /dev/null
    description: Configure kube cache dir
    required: false
  ns-ttl:
    default: 1h
    description: Namespace TTL, used by Kyverno for cleanup
    required: false
  product:
    default: core
    description: Product name
    required: false
  crib-alert-slack-webhook:
    default: ""
    description:
      slack incoming webhook to notify CRIB team on CRIB provisioning failures
    required: false
outputs:
  devspace-namespace:
    description: Kubernetes namespace used to provision CRIB
    value: ${{ steps.generate-ns-name.outputs.devspace-namespace }}

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        # Validate product input
        case "${{ inputs.product }}" in
          "core"|"ccip")
            echo "Product input is valid: ${{ inputs.product }}"
            ;;
          *)
            echo "Invalid product input: ${{ inputs.product }}. Must be 'core' or 'ccip'."
            exit 1
            ;;
        esac

    - name: Setup GAP
      uses: smartcontractkit/.github/actions/setup-gap@d316f66b2990ea4daa479daa3de6fc92b00f863e # setup-gap@0.3.2
      with:
        checkout-repo: false
        aws-role-arn: ${{ inputs.aws-role-arn }}
        api-gateway-host: ${{ inputs.api-gateway-host }}
        aws-region: ${{ inputs.aws-region }}
        ecr-private-registry: ${{ inputs.ecr-private-registry }}
        k8s-cluster-name: ${{ inputs.k8s-cluster-name }}
        use-private-ecr-registry: true
        use-k8s: true
        # Choose port that is less likely to be conflicting with other GAP
        # instances that runs in the same workflow
        proxy-port: 8888
        gc-basic-auth: ${{ inputs.gc-basic-auth }}
        gc-host: ${{ inputs.gc-host }}
        gc-org-id: ${{ inputs.gc-org-id }}

    - name: Checkout crib repo
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      with:
        repository: "smartcontractkit/crib"
        ref: "main"
        path: "${{ github.workspace }}/crib"
        token: ${{ inputs.github-token }}

    - name: Setup Nix
      uses: smartcontractkit/.github/actions/setup-nix@4df907a307d91761c15cdff65e508145bdbcfca3 # setup-nix@0.3.0
      with:
        cache-pubkey: ${{ inputs.cache-pubkey }}
        enable-aws: true
        aws-region: ${{ inputs.aws-region }}

    - name: Generate CRIB Namespace Name
      id: generate-ns-name
      shell: bash
      run: |
        echo "devspace-namespace=crib-ci-$(uuidgen | cut -c1-5)" >> $GITHUB_OUTPUT

    - name: Deploy to CRIB ephemeral environment
      working-directory:
        ${{ github.workspace }}/crib/deployments/${{ inputs.product }}
      shell: bash
      env:
        CHAINLINK_CODE_DIR: "../"
        CRIB_CI_ENV: true
        CRIB_SKIP_DOCKER_ECR_LOGIN: true
        CRIB_SKIP_HELM_ECR_LOGIN: true
        DEVSPACE_IMAGE:
          "${{
          inputs.ecr-private-registry-stage}}.dkr.ecr.us-west-2.amazonaws.com/chainlink-devspace"
        DEVSPACE_INGRESS_BASE_DOMAIN: ${{ inputs.ingress-base-domain }}
        DEVSPACE_INGRESS_CIDRS: ${{ inputs.devspace-ingress-cidrs }}
        PROFILES: ${{ inputs.devspace-profiles }}
        KUBECACHEDIR: /dev/null
        NS_TTL: ${{ inputs.ns-ttl }}
        SETUP_AWS_PROFILE: false
        SETUP_EKS_CONFIG: false
      run: |
        echo "Working directory: $(pwd)"

        # Get the namespace name from GitHub Actions output
        NAMESPACE="${{ steps.generate-ns-name.outputs.devspace-namespace }}"
        echo "Using $NAMESPACE Kubernetes namespace"
        kubectl create ns "$NAMESPACE"

        # Kyverno needs some time to inject the RoleBinding
        sleep 3

        # Check if product is ccip and set ATLAS_ENABLED accordingly
        if [[ "${{ inputs.product }}" == "ccip" ]]; then
          export ATLAS_ENABLED=true
        fi

        nix develop -c ./cribbit.sh "$NAMESPACE"

        profile_args_array=()
        if [[ -n "$PROFILES" ]]; then
          # Convert comma-separated string to array
          IFS=',' read -r -a profiles_array <<< "$PROFILES"

          for profile in "${profiles_array[@]}"; do
            profile_args_array+=("-p")
            profile_args_array+=("$profile")
          done
          echo "running devspace with profile args: ${profile_args_array[@]}"
        fi

        nix develop -c devspace deploy --skip-build -o=${{ inputs.image-tag }} "${profile_args_array[@]}"
    - name: Render notification template
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: render-slack-template
      if: failure() && inputs.crib-alert-slack-webhook != ''
      with:
        script: |
          const {GITHUB_SERVER_URL, GITHUB_REPOSITORY, GITHUB_RUN_ID} = process.env;
          const workflowRunUrl = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`;

          payload = {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":red_circle: *Failed to provision CRIB environment for ${{ inputs.product }}*"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": `<${workflowRunUrl}|Workflow Run>
          Git Repo: ${GITHUB_REPOSITORY}
          Sender: ${context.payload.sender.login}`
                }
              }
            ]
          };
          return JSON.stringify(payload);

    - name: Notify CRIB team on failure
      if: failure() && inputs.crib-alert-slack-webhook != ''
      id: slack
      uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e # v1.26.0
      with:
        # For posting a rich message using Block Kit
        payload: ${{ steps.render-slack-template.outputs.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.crib-alert-slack-webhook }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
