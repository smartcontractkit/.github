name: "Setup CRIB Environment"
description:
  "Composite action for deploying a CRIB, setting up GAP, Nix, and deploying to
  an ephemeral environment."

inputs:
  aws-ecr-private-registry:
    description: "AWS ECR private registry."
    required: true
  aws-region:
    description: "AWS region."
    required: true
  aws-role-arn:
    description: "AWS Role ARN to be used for setting up GAP."
    required: true
  devspace-ingress-cidrs:
    default: "0.0.0.0/0"
    description: "DevSpace ingress CIDRs."
    required: false
  gap-local-proxy-port:
    description: "The port the local GAP proxy will listen on."
    required: false
    default: "8888"
  github-token:
    description:
      "The `GITHUB_TOKEN` issued for the workflow. It is required unless the
      action is called from the crib repo."
    default: ${{ github.token }}
    required: false
  ingress-base-domain:
    description: "DevSpace ingress base domain."
    required: true
  k8s-cluster-name:
    description: "Kubernetes cluster name."
    required: true
  ns-ttl:
    default: "1h"
    description:
      "Namespace TTL, which defines how long a namespace will remain alive after
      creation."
    required: false
  ns-name-prefix:
    default: "crib-ci"
    description: "Namespace name prefix for CRIB environment."
    required: false
  ns-name-override:
    default: ""
    description: "Namespace name override for CRIB environment."
    required: false
  command:
    default: "core"
    description: "The devspace command to run."
    required: false
  command-args:
    default: "--skip-build"
    description: "The arguments to pass to the devspace command."
    required: false
  product-image:
    required: false
    description:
      "Docker image without tag e.g public.ecr.aws/chainlink/chainlink"
    default: public.ecr.aws/chainlink/chainlink
  product-image-tag:
    default: "latest"
    description: "Docker image tag for the product."
    required: false
  product-dir:
    default: "chainlink"
    description: "Product directory under deployments folder"
    required: false
  send-alerts:
    default: "true"
    description: |
      Send slack alerts when CRIB provisioning fails.
      When enabled it requires to provide crib-alert-slack-webhook parameter as well.
  crib-alert-slack-webhook:
    default: ""
    description: |
      The URL of the slack webhook which should be used for sending alerts.
      for example: https://hooks.slack.com/services/aaa/bbb
    required: false
  crib-repo-ref:
    default: "v2.2.0"
    required: false
    description: Useful for testing updates in CRIB
  chainlink-team:
    required: true
    description: |
      Specify a relevant value for tagging resources and attributing
      costs to the correct team.
  chainlink-product:
    required: true
    description: |
      Specify a relevant value for tagging resources and attributing
      costs to the correct product.
  k8s-api-endpoint-port:
    required: false
    default: "443"
    description: "The port number for accessing the Kubernetes API server."
  enable-proxy-debug:
    required: false
    default: "false"
    description:
      "Enable or disable detailed Envoy proxy logs used for K8s API access. When
      enabled, debug logs are generated locally, and container logs are streamed
      to the console for troubleshooting."
  github-oidc-token-header-name:
    required: false
    default: "x-authorization-github-jwt"
    description:
      "Specifies the name of the HTTP header used to pass the GitHub OIDC JWT
      token. This header is automatically injected by the local proxy and must
      not be the same as the default 'Authorization' header."
  dynamic-proxy-port:
    description: "The port the dynamic proxy will listen on. Defaults to 9090."
    required: false
    default: "9090"
  websockets-proxy-port:
    description:
      "Port number used by the listener for the local proxy of WebSocket
      services."
    default: "9443"
    required: false
  main-dns-zone:
    description:
      "The DNS zone is used for exposing services. It is required when using the
      dynamic local proxy to prevent sending requests and exposing sensitive
      information to random external endpoints. This ensures that the dynamic
      local proxy is used only for the specific DNS zone."
  websockets-services:
    description:
      "List of service names to be configured in the local proxy for proper
      handling of all required headers, including the JWT token. Append the
      Devspace namespace name as the suffix in the service name, e.g.,
      'gap-${DEVSPACE_NAMESPACE}-geth, gap-${DEVSPACE_NAMESPACE}-custom-ws'."
    default: ""
    required: false
outputs:
  devspace-namespace:
    description: "Kubernetes namespace used to provision a CRIB environment."
    value: ${{ steps.generate-ns-name.outputs.devspace-namespace }}
  gap-local-proxy-port:
    description: "The port the local proxy will listen on."
    value: ${{ inputs.proxy-port }}

runs:
  using: "composite"
  steps:
    - name: Generate CRIB Namespace Name, configure variables
      id: generate-ns-name
      shell: bash
      env:
        NS_NAME_PREFIX: ${{ inputs.ns-name-prefix }}
        NS_NAME_OVERRIDE: ${{ inputs.ns-name-override }}
        PR_NUMBER: ${{ github.event.number }}
        WORKFLOW_JOB: ${{ github.job }}
        COMMIT_SHA: ${{ github.sha }}
        WORKFLOW_RUN_NUMBER: ${{ github.run_number }}
      run: |
        REPO_NAME=$(basename "$GITHUB_REPOSITORY")
        BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

        # configure namespace
        if [ -z "$NS_NAME_OVERRIDE" ]; then
          echo "The variable is empty"
          echo "devspace-namespace=${NS_NAME_PREFIX}-$(uuidgen | cut -c1-6)" | tee -a "$GITHUB_OUTPUT"
        else
            echo "The variable is not empty"
            echo "devspace-namespace=${NS_NAME_OVERRIDE}" | tee -a "$GITHUB_OUTPUT"
        fi
        
        # configure rest of variables
        echo "pr-number=${PR_NUMBER}" | tee -a "$GITHUB_OUTPUT"
        echo "workflow-job=${WORKFLOW_JOB}" | tee -a "$GITHUB_OUTPUT"
        echo "repo-name=${REPO_NAME}" | tee -a "$GITHUB_OUTPUT"
        echo "branch-name=${BRANCH_NAME}" | tee -a "$GITHUB_OUTPUT"
        echo "commit-sha=${COMMIT_SHA}" | tee -a "$GITHUB_OUTPUT"
        echo "workflow-run-number=${WORKFLOW_RUN_NUMBER}" | tee -a "$GITHUB_OUTPUT"

    - name: Set Websockets Services
      id: set-websockets-services
      shell: bash
      env:
        DEVSPACE_NAMESPACE:
          "${{ steps.generate-ns-name.outputs.devspace-namespace }}"
        WEBSOCKETS_SERVICES: ${{ inputs.websockets-services }}
      run: |
        # Substitute environment variables in the input string
        websockets_services=$(echo "${WEBSOCKETS_SERVICES}" | envsubst)
        echo "websockets-services=${websockets_services}" | tee -a "$GITHUB_OUTPUT"

    - name: Setup GAP
      uses: smartcontractkit/.github/actions/setup-gap@b969c2d42c15e937e2f94cc0e050f39cd5369f4f # setup-gap@4.0.0
      env:
        WEBSOCKETS_SERVICES:
          "${{ steps.set-websockets-services.outputs.websockets-services }}"
      with:
        aws-region: ${{ inputs.aws-region }}
        aws-role-arn: ${{ inputs.aws-role-arn }}
        enable-proxy-debug: ${{ inputs.enable-proxy-debug }}
        github-oidc-token-header-name:
          ${{ inputs.github-oidc-token-header-name }}
        k8s-api-endpoint-port: ${{ inputs.k8s-api-endpoint-port }}
        k8s-cluster-name: ${{ inputs.k8s-cluster-name }}
        use-k8s: true
        # Choose port that is less likely to be conflicting with other GAP
        # instances that runs in the same workflow
        proxy-port: ${{ inputs.gap-local-proxy-port }}
        dynamic-proxy-port: ${{ inputs.dynamic-proxy-port }}
        main-dns-zone: ${{ inputs.main-dns-zone }}
        websockets-services: ${{ env.WEBSOCKETS_SERVICES }}

    - name: Checkout crib repo
      uses: actions/checkout@v4
      with:
        repository: "smartcontractkit/crib"
        ref: ${{ inputs.crib-repo-ref }}
        path: "${{ github.workspace }}/crib"
        token: ${{ inputs.github-token }}

    # This step is useful only in the context of crib repo
    - name: Detect if the CLI was changed, only build if needed
      if: github.repository  == 'smartcontractkit/crib'
      uses: dorny/paths-filter@v3
      id: filter
      with:
        working-directory: "${{ github.workspace }}/crib"
        filters: |
          cli: './cli/**'

    - name: Login to AWS ECR for Helm
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      with:
        registries: ${{ inputs.aws-ecr-private-registry }}

    - uses: actions/setup-go@v5
      with:
        go-version-file: "${{ github.workspace }}/crib/cli/go.mod"
        cache-dependency-path: "${{ github.workspace }}/crib/**/*.sum"

    - name: Setup Nix
      uses: smartcontractkit/.github/actions/setup-nix@4df907a307d91761c15cdff65e508145bdbcfca3 # setup-nix@0.3.0
      with:
        cache-pubkey: ${{ inputs.cache-pubkey }}
        enable-aws: true
        aws-region: ${{ inputs.aws-region }}

    - name: Create and label CRIB namespace
      shell: bash
      env:
        DEVSPACE_NAMESPACE:
          "${{ steps.generate-ns-name.outputs.devspace-namespace }}"
      run: |
        # a valid label must be an empty string or consist of alphanumeric characters,
        # ‘-’, ‘_’ or ‘.’, and must start and end with an alphanumeric character
        # (e.g. ‘MyValue’,  or ‘my_value’,  or ‘12345’, regex used for validation is
        # ‘(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?’)
        sanitized_branch=$(echo "${{ steps.generate-ns-name.outputs.branch-name }}" \
          | sed 's/[^a-zA-Z0-9._-]/_/g' | cut -c1-63 | sed 's/[._-]$//')

        # Validate that chainlink-team and chainlink-product inputs adhere to the Kubernetes label format.
        if [[ ! "${{ inputs.chainlink-team }}" =~ ^[a-zA-Z0-9_.-]+$ ]] || [[ "${{ inputs.chainlink-team }}" -gt 63 ]] || [[ "${{ inputs.chainlink-team }}" =~ ^\. ]] || [[ "${{ inputs.chainlink-team }}" =~ \.$ ]]; then
          echo "Invalid value for chainlink-team label: ${{ inputs.chainlink-team }}. Must be up to 63 characters, contain only letters, numbers, hyphens, underscores, and dots, and cannot start or end with a dot."
          exit 1
        fi
        if [[ ! "${{ inputs.chainlink-product }}" =~ ^[a-zA-Z0-9_.-]+$ ]] || [[ "${{ inputs.chainlink-product }}" -gt 63 ]] || [[ "${{ inputs.chainlink-product }}" =~ ^\. ]] || [[ "${{ inputs.chainlink-product }}" =~ \.$ ]]; then
          echo "Invalid value for chainlink-product label: ${{ inputs.chainlink-product }}. Must be up to 63 characters, contain only letters, numbers, hyphens, underscores, and dots, and cannot start or end with a dot."
          exit 1
        fi

        echo "Creating ${DEVSPACE_NAMESPACE} Kubernetes namespace.."
        kubectl get ns "${DEVSPACE_NAMESPACE}" || kubectl create ns "${DEVSPACE_NAMESPACE}"

        kubectl label namespace --overwrite=true ${DEVSPACE_NAMESPACE} \
          branch="${sanitized_branch}" \
          commit=${{ steps.generate-ns-name.outputs.commit-sha }} \
          pr-number=${{ steps.generate-ns-name.outputs.pr-number || 'none' }} \
          repo=${{ steps.generate-ns-name.outputs.repo-name }} \
          workflow-job=${{ steps.generate-ns-name.outputs.workflow-job }} \
          workflow-run-number=${{ steps.generate-ns-name.outputs.workflow-run-number }}

        kubectl label namespace --overwrite=true ${DEVSPACE_NAMESPACE} \
          cleanup.kyverno.io/ttl=${{ inputs.ns-ttl }}

        echo "Kubernetes namespace [${DEVSPACE_NAMESPACE}] successfully labeled:"
        kubectl get namespace ${DEVSPACE_NAMESPACE} --show-labels

    - name: Deploy to CRIB ephemeral environment
      working-directory:
        ${{ github.workspace }}/crib/deployments/${{ inputs.product-dir }}
      shell: bash
      env:
        CHAINLINK_CODE_DIR: "../"
        CHAINLINK_PRODUCT: ${{ inputs.chainlink-product }}
        CHAINLINK_TEAM: ${{ inputs.chainlink-team }}
        CLI_CHANGED: ${{ steps.filter.outputs.cli == 'true' }}
        CRIB_CI_ENV: true
        CRIB_SKIP_DOCKER_ECR_LOGIN: true
        CRIB_SKIP_HELM_ECR_LOGIN: true
        DEVSPACE_IMAGE_TAG: "${{inputs.product-image-tag}}"
        DEVSPACE_IMAGE: "${{inputs.product-image}}"
        DEVSPACE_INGRESS_BASE_DOMAIN: ${{ inputs.ingress-base-domain }}
        DEVSPACE_INGRESS_CIDRS: ${{ inputs.devspace-ingress-cidrs }}
        DEVSPACE_NAMESPACE:
          "${{ steps.generate-ns-name.outputs.devspace-namespace }}"
        GH_TOKEN: ${{ inputs.github-token }}
        PROFILES: ${{ inputs.devspace-profiles }}
        SETUP_AWS_PROFILE: false
        SETUP_EKS_CONFIG: false
      run: |
        echo "Working directory: $(pwd)"
        echo "Using $DEVSPACE_NAMESPACE Kubernetes namespace"

        nix develop -c /bin/bash -c "devspace use namespace ${DEVSPACE_NAMESPACE} && devspace run ${{ inputs.command }} ${{ inputs.command-args }}"

    - name: Render notification template
      uses: actions/github-script@v7
      id: render-slack-template
      if:
        failure() && inputs.crib-alert-slack-webhook != '' && inputs.send-alerts
        == 'true'
      with:
        script: |
          const {GITHUB_SERVER_URL, GITHUB_REPOSITORY, GITHUB_RUN_ID, GITHUB_ACTOR} = process.env;
          const workflowRunUrl = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`;

          payload = {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":red_circle: *Failed to provision CRIB environment for ${{ inputs.command}}*"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": `<${workflowRunUrl}|Workflow Run>
          Git Repo: ${GITHUB_REPOSITORY}
          Github Actor: ${GITHUB_ACTOR}`
                }
              }
            ]
          };
          return JSON.stringify(payload);

    - name: Notify CRIB team on failure
      if:
        failure() && inputs.crib-alert-slack-webhook != '' && inputs.send-alerts
        == 'true'
      id: slack
      uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e # v1.26.0
      with:
        # For posting a rich message using Block Kit
        payload: ${{ steps.render-slack-template.outputs.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.crib-alert-slack-webhook }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Collect Envoy proxy logs when debug is enabled
      uses: jwalton/gh-docker-logs@2741064ab9d7af54b0b1ffb6076cf64c16f0220e # v2.2.2
      if: inputs.enable-proxy-debug == 'true' || failure()
