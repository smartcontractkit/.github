name: ci-test
description: Test golang code

inputs:
  # general inputs
  checkout-repo:
    description: "enable git checkout repo"
    required: false
    default: "true"
  checkout-repo-fetch-depth:
    description: "number of commits to fetch"
    required: false
    default: "0"
  # aws inputs
  aws-role-duration-seconds:
    description: ""
    required: false
    default: "900"
  aws-region:
    description: ""
    required: false
  # gati inputs
  use-gati:
    description: ""
    required: false
    default: "false"
  aws-role-arn-gati:
    description: ""
    required: false
  aws-lambda-url-gati:
    description: ""
    required: false
  # env inputs
  use-env-files:
    description: ""
    required: false
    default: "false"
  env-files:
    description: "<env-file-1>|<env-file-2>|..."
    required: false
    default: .env
  # golang inputs
  use-go-cache:
    description: ""
    required: false
    default: "false"
  go-cache-dep-path:
    description: ""
    required: false
    default: go.sum
  go-version-file:
    description: ""
    required: false
    default: go.mod
  go-test-cmd:
    description: ""
    required: false
    default: go test ./...
  go-test-race-cmd:
    description: |
      Command to run Go tests with race detection enabled. This command is used to
      execute the Go test suite while checking for race conditions. By default,
      it runs `go test` with the `-race` flag to enable the race detector, along
      with flags for code coverage. The default command is:

      `go test -race ./... -coverpkg=./...-coverprofile=race/race_coverage.txt`

      - `-race` enables the race detector to identify concurrent access issues.
      - `./...` specifies that all tests in the module should be run.
      - `-coverpkg=./...` includes coverage for all packages.
      - `-coverprofile=race_coverage.txt` generates a coverage report file named `race_coverage.txt`.

      Customize this command if you need different flags or configurations for your testing environment.
    required: false
    default:
      go test -race ./... -coverpkg=./... -coverprofile=race/race_coverage.txt

  enable-go-test-race:
    description: |
      Specifies whether to enable the Go race detector when running tests.
      When set to "true", the race detector will be activated, which helps
      identify race conditions in concurrent Go code. By default, this is set
      to "false", meaning race detection is disabled unless explicitly enabled.
    required: false
    default: "false"
  # docker-compose inputs
  use-docker-compose:
    description: ""
    required: false
    default: "false"
  docker-compose-workdir:
    description: ""
    required: false
    default: "."

runs:
  using: composite
  steps:
    - name: Checkout repo
      if: inputs.checkout-repo == 'true'
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: ${{ inputs.checkout-repo-fetch-depth }}

    - name: Assume aws gati role
      if: inputs.use-gati == 'true'
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      with:
        role-to-assume: ${{ inputs.aws-role-arn-gati }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: true

    - name: Get github token from gati
      if: inputs.use-gati == 'true'
      id: get-gh-token
      uses: smartcontractkit/chainlink-github-actions/github-app-token-issuer@main
      with:
        url: ${{ inputs.aws-lambda-url-gati }}

    - name: Configure github token
      if: inputs.use-gati == 'true'
      shell: bash
      run: |
        git config --global \
          url."https://x-access-token:${{ steps.get-gh-token.outputs.access-token }}@github.com/".insteadOf \
          "https://github.com/"

    - name: Set env from files
      if: inputs.use-env-files == 'true'
      uses: cardinalby/export-env-action@b16a08b396d047e3f9e1446e3946440e2be02a73 # 2.2.2
      with:
        envFile: ${{ inputs.env-files }}

    - name: Run docker-compose
      if: inputs.use-docker-compose == 'true'
      shell: bash
      run: docker compose up -d
      working-directory: ${{ inputs.docker-compose-workdir }}

    - name: Setup go
      uses: smartcontractkit/.github/actions/setup-golang@c5e1a1a754f459440b084c6661538b8635dcb33a # setup-golang@0.2.0
      with:
        go-version-file: ${{ inputs.go-version-file }}
        use-go-cache: ${{ inputs.use-go-cache }}
        go-cache-dep-path: ${{ inputs.go-cache-dep-path }}

    - name: Run go test
      shell: bash
      run: |
        set -o pipefail
        ${{ inputs.go-test-cmd }}

    - name: Run Go tests with race detector
      if: ${{ inputs.enable-go-test-race == 'true' }}
      env:
        GORACE: "log_file=$PWD/race,race_log=$PWD/race"
      shell: bash
      run: |
        set -o pipefail
        mkdir race
        ${{ inputs.go-test-race-cmd }}

    - name: Store test report artifacts
      if: always()
      uses: actions/upload-artifact@v4.4.3
      with:
        name: go-test-results
        path: |
          ./coverage.txt
          ./output.txt

    - name: Store race coverage report
      if: ${{ inputs.enable-go-test-race == 'true' }}
      uses: actions/upload-artifact@v4.4.3
      with:
        name: go-test-race-results
        path: race/*.txt
