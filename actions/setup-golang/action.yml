name: Setup golang
description: Setup Golang with efficient caching

inputs:
  only-modules:
    description: Set to 'true' to only cache modules
    default: "false"
  go-version-file:
    description: Path to go.mod file
    default: "go.mod"
    required: false
  use-go-cache:
    description: Set this to false to disable caching
    required: false
    default: "false"
  go-cache-dep-path:
    description: Path to go dependencies
    required: false
    default: "go.sum"
  cache-version:
    description: Set this to cache bust
    required: false
    default: "1"

runs:
  using: composite
  steps:
    # - name: Setup tar default options
    #   shell: bash
    #   # Do not overwrite existing files when extracting files from a cache archive.
    #   # Since actions/cache does not support this option, we set it here as a default.
    #   run: echo "TAR_OPTIONS=--skip-old-files" >> $GITHUB_ENV

    - name: Get Go Version
      shell: bash
      id: go-version
      run: |
        version=$(sed -ne '/^toolchain /s/^toolchain go//p' ${{ inputs.go-version-file }})
        if [ -z "$version" ]; then
          version=$(sed -ne '/^go /s/^go //p' ${{ inputs.go-version-file }})
          echo "Toolchain version not found in ${{ inputs.go-version-file }}, using go directive instead."
        fi
        echo "Go Version: $version"
        echo "version=$version" >> "$GITHUB_OUTPUT"

    - name: Set up Go
      uses: actions/setup-go@v5.0.2
      with:
        go-version: ${{ steps.go-version.outputs.version }}
        cache: ${{ inputs.use-go-cache }}
        cache-dependency-path: ${{ inputs.go-cache-dep-path }}

    - name: Get branch name
      if: ${{ inputs.only-modules == 'false' }}
      id: branch-name
      uses: tj-actions/branch-names@6871f53176ad61624f978536bbf089c574dc19a2 # v8.0.1

    - name: Set go cache keys
      shell: bash
      id: go-cache-dir
      run: |
        echo "gomodcache=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
        echo "gobuildcache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      name: Cache Go Modules
      with:
        path: |
          ${{ steps.go-cache-dir.outputs.gomodcache }}
        # The lifetime of go modules is much higher than the build outputs, so we increase cache efficiency
        # here by not having the primary key contain the branch name
        key:
          ${{ runner.os }}-gomod-${{ inputs.cache-version }}-${{
          hashFiles('./go.sum') }}
        restore-keys: |
          ${{ runner.os }}-gomod-${{ inputs.cache-version }}-

    - uses: actions/cache@v4
      if: ${{ inputs.only-modules == 'false' }}
      name: Cache Go Build Outputs
      with:
        path: |
          ${{ steps.go-cache-dir.outputs.gobuildcache }}
        # The lifetime of go build outputs is pretty short, so we make our primary cache key be the branch name
        key:
          ${{ runner.os }}-gobuild-${{ inputs.cache-version }}-${{
          hashFiles('./go.sum') }}-${{ steps.branch-name.outputs.current_branch
          }}
        restore-keys: |
          ${{ runner.os }}-gobuild-${{ inputs.cache-version }}-${{ hashFiles('./go.sum') }}-
          ${{ runner.os }}-gobuild-${{ inputs.cache-version }}-
