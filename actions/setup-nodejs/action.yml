name: Setup nodejs
description: Setup Nodejs and Pnpm with caching

inputs:
  node-version-file:
    description: The node version
    required: false
    default: .tool-versions
  pnpm-version:
    description:
      The pnpm version to use. This value takes precedence over the
      pnpm-version-file input. Pseudo-default is ^10.0.0.
    required: false
  use-cache:
    description: Enable github actions cache
    required: true
    default: "true"
  restore-cache-only:
    description: Restore cache only, do not create a new cache
    required: true
    default: "false"
  run-install:
    description: Run npm/yarn/pnpm install
    required: true
    default: "true"
  install-command:
    description: The command to run to install dependencies
    required: false
    default: "pnpm install"
  package-json-directory:
    description:
      The sub-directory of the package.json, if not at the root of the
      repository
    required: false
    default: "."
  package-manager:
    description: Which package manager to use (pnpm, npm, yarn)
    required: false
    default: pnpm
  registry-url:
    description: The npm registry URL to use
    required: false

runs:
  using: composite
  steps:
    - name: Install node
      uses: actions/setup-node@v4
      with:
        node-version-file: ${{ inputs.node-version-file }}
        registry-url: ${{ inputs.registry-url }}

    - name: Get pnpm version
      id: pnpm-version
      shell: bash
      env:
        PNPM_VERSION_INPUT: ${{ inputs.pnpm-version }}
        PNPM_FALLBACK_VERSION: "^10.0.0"
        DOT_TOOL_VERSIONS: ".tool-versions"
      run: |
        echo "Attempting to determine pnpm version to use..."

        if [[ ! -z "${PNPM_VERSION_INPUT}" ]]; then
          echo "Using pnpm version from input: ${PNPM_VERSION_INPUT}"
          echo "pnpm-version=${PNPM_VERSION_INPUT}" | tee -a "${GITHUB_OUTPUT}"
          exit 0
        fi

        if [[ -f "${DOT_TOOL_VERSIONS}" ]]; then
          echo "Found ${DOT_TOOL_VERSIONS} file, checking for pnpm version..."
          PNPM_VERSION_FROM_FILE=$(grep '^pnpm ' "${DOT_TOOL_VERSIONS}" | cut -d' ' -f2-)
        fi

        if [[ -z "${PNPM_VERSION_FROM_FILE}" ]]; then
          echo "::info:: No pnpm version found in .tool-versions file (or it may not exist). Using default version."
          echo "pnpm-version=${PNPM_FALLBACK_VERSION}" | tee -a "${GITHUB_OUTPUT}"
          exit 0
        fi

        echo "Found pnpm version in file. Using: ${PNPM_VERSION_FROM_FILE}"
        echo "pnpm-version=${PNPM_VERSION_FROM_FILE}" | tee -a "${GITHUB_OUTPUT}"

    - name: Install pnpm
      if: inputs.package-manager == 'pnpm'
      uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
      with:
        version: ${{ steps.pnpm-version.outputs.pnpm-version }}
        run_install: false

    - name: Validate package manager input
      shell: bash
      env:
        PACKAGE_MANAGER: ${{ inputs.package-manager }}
      run: |
        case "${PACKAGE_MANAGER}" in
          pnpm|npm|yarn)
            ;;
          *)
            echo "::error::Invalid package manager '${PACKAGE_MANAGER}'. Must be one of: pnpm, npm, yarn."
            exit 1
            ;;
        esac

    - name: Get pnpm store directory
      if: inputs.use-cache == 'true' && inputs.package-manager == 'pnpm'
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" | tee -a "${GITHUB_OUTPUT}"

    - name: Setup pnpm cache
      if:
        inputs.use-cache == 'true' && inputs.restore-cache-only == 'false' &&
        inputs.package-manager == 'pnpm'
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Setup npm cache
      if:
        inputs.use-cache == 'true' && inputs.restore-cache-only == 'false' &&
        inputs.package-manager == 'npm'
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-cache-

    - name: Setup yarn cache
      if:
        inputs.use-cache == 'true' && inputs.restore-cache-only == 'false' &&
        inputs.package-manager == 'yarn'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          .yarn/cache
        key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-cache-

    - name: Run package manager install
      if: inputs.run-install == 'true'
      shell: bash
      env:
        INSTALL_COMMAND: ${{ inputs.install-command }}
      working-directory: ${{ inputs.package-json-directory }}
      run: |
        if [[ -z "$INSTALL_COMMAND" ]]; then
          echo "::error::No install command provided, skipping install step."
          exit 1
        fi

        $INSTALL_COMMAND
