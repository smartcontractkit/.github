name: Setup nodejs
description: Setup Nodejs and Pnpm with caching

inputs:
  node-version-file:
    description: The node version
    required: false
    default: .tool-versions
  pnpm-version-file:
    description: |
      The pnpm 'version file'. Defaults to .tool-versions.
      Use pnpm-version input to override this value.
    required: false
    default: .tool-versions
  pnpm-version:
    description:
      The pnpm version to use. This value takes precedence over the
      pnpm-version-file input. eg. ^10.0.0
    required: false"
  use-cache:
    description: Enable github actions cache
    required: true
    default: "true"
  restore-cache-only:
    description: Restore cache only, do not create a new cache
    required: true
    default: "false"
  run-install:
    description: Run npm/yarn/pnpm install
    required: true
    default: "true"
  install-command:
    description: The command to run to install dependencies
    required: false
    default: "pnpm install"
  package-json-directory:
    description:
      The sub-directory of the package.json, if not at the root of the
      repository
    required: false
    default: "."
  registry-url:
    description: The npm registry URL to use
    required: false

runs:
  using: composite
  steps:
    - name: Install node
      uses: actions/setup-node@v4
      with:
        node-version-file: ${{ inputs.node-version-file }}
        registry-url: ${{ inputs.registry-url }}

    - name: Get pnpm version from file
      if: inputs.pnpm-version-file != '' && inputs.pnpm-version == ''
      id: pnpm-version
      shell: bash
      env:
        PNPM_VERSION_FILE_INPUT: ${{ inputs.pnpm-version-file }}
      run: |
        if [[ -f "${PNPM_VERSION_FILE_INPUT}" ]]; then
          PNPM_VERSION_FROM_FILE=$(grep '^pnpm ' ${PNPM_VERSION_FILE_INPUT} | cut -d' ' -f2-)
        fi

        if [[ -z "${PNPM_VERSION_FROM_FILE}" ]]; then
          echo ":error::No pnpm version found in file ${PNPM_VERSION_FILE_INPUT}, and no pnpm-version input provided. Failing."
          exit 1
        else
          echo "Found pnpm version in file: ${PNPM_VERSION_FROM_FILE}"
          echo "pnpm-version=${PNPM_VERSION_FROM_FILE}" | tee -a "${GITHUB_OUTPUT}"
        fi

    - name: Install pnpm
      uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
      with:
        version:
          ${{ inputs.pnpm-version || steps.pnpm-version.outputs.pnpm-version }}
        run_install: false

    - name: Get pnpm store directory
      if: inputs.use-cache == 'true'
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" | tee -a "${GITHUB_OUTPUT}"

    - name: Setup pnpm cache
      if: inputs.use-cache == 'true' && inputs.restore-cache-only == 'false'
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Restore pnpm cache
      if: inputs.use-cache == 'true' && inputs.restore-cache-only == 'true'
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Run package manager install
      if: inputs.run-install == 'true'
      shell: bash
      working-directory: ${{ inputs.package-json-directory }}
      env:
        INSTALL_COMMAND: ${{ inputs.install-command }}
      run: |
        if [ -z "$INSTALL_COMMAND" ]; then
          echo "::error::No install command provided, skipping install step."
          exit 1
        fi

        $INSTALL_COMMAND
