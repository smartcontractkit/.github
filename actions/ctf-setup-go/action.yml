name: ctf-setup-go
description: "Common golang setup for CTF"

inputs:
  go_version:
    required: false
    description: Go version to install
  go_mod_path:
    required: false
    description: The go.mod file path
    default: "go.mod"
  cache_restore_only:
    required: false
    description:
      Only restore the cache, set to true if you want to restore and save on
      cache hit miss
    default: "false"
  cache_builds:
    required: false
    description: Cache go builds
    default: "false"
  cache_key_id:
    required: true
    description: Cache key id
  no_cache:
    required: false
    description: Do not use a go cache
    default: "false"
  should_tidy:
    required: false
    description: Should we check go mod tidy
    default: "true"
  test_download_vendor_packages_command:
    required: false
    description: The command to download the go modules
  gati_token:
    required: false
    description: GATI token used to pull private repos

runs:
  using: composite
  steps:
    - name: Setup Go
      uses: actions/setup-go@v5.0.2
      with:
        go-version: ${{ inputs.go_version }}
        go-version-file: ${{ inputs.go_mod_path }}
        check-latest: true
        cache: false

    - name: Setup Go with private repo access
      shell: bash
      if: ${{ inputs.gati_token != '' }}
      run: |
        git config --global url."https://x-access-token:${{ inputs.gati_token }}@github.com/".insteadOf "https://github.com/"
        go env -w GOPRIVATE=github.com/smartcontractkit/*

    - name: Set go cache keys
      shell: bash
      id: go-cache-dir
      run: |
        echo "gomodcache=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
        echo "gobuildcache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

    - name: Cache Go Modules
      if: inputs.cache_restore_only == 'false' && inputs.no_cache == 'false'
      uses: actions/cache@v4
      id: cache-packages
      with:
        path: ${{ steps.go-cache-dir.outputs.gomodcache }}
        key:
          ${{ runner.os }}-${{ inputs.cache_key_id }}-gomod-${{
          hashFiles(inputs.go_mod_path) }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cache_key_id }}-gomod-

    - uses: actions/cache@v4
      if: inputs.cache_restore_only == 'false' && inputs.cache_builds == 'true'
      name: Cache Go Builds
      with:
        path: ${{ steps.go-cache-dir.outputs.gobuildcache }}
        # The lifetime of go build outputs is pretty short, so we make our primary cache key be the branch name
        key:
          ${{ runner.os }}-${{ inputs.cache_key_id }}-gobuild-${{
          hashFiles(inputs.go_mod_path) }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cache_key_id }}-gobuild-

    - name: Restore Go Modules
      if: inputs.cache_restore_only != 'false' && inputs.no_cache == 'false'
      uses: actions/cache/restore@v4
      id: restore-cache-packages
      with:
        path: |
          ${{ steps.go-cache-dir.outputs.gomodcache }}
        key:
          ${{ runner.os }}-${{ inputs.cache_key_id }}-gomod-${{
          hashFiles(inputs.go_mod_path) }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cache_key_id }}-gomod-

    - name: Tidy and check files
      if: ${{ inputs.should_tidy == 'true' }}
      shell: bash
      run: |
        # find test go root by using the go_mod_path and change to that directory
        TEST_LIB_PATH="${{ inputs.go_mod_path }}"
        if [ "${#TEST_LIB_PATH}" -gt "6" ]; then
            TEST_LIB_PATH=${TEST_LIB_PATH%go.mod}
            cd "${TEST_LIB_PATH}"
        fi
        go mod tidy
        git diff --stat --exit-code

    - name: Run go mod download
      if: inputs.test_download_vendor_packages_command
      shell: bash
      run: ${{ inputs.test_download_vendor_packages_command }}
