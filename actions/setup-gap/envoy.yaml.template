static_resources:
  listeners:
    - name: https
      address:
        socket_address:
          address: 0.0.0.0  # Consider restricting if needed
          port_value: "${PROXY_PORT}"
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: http
                http_protocol_options:
                  max_headers_count: 500
                  max_headers_size: 65536  # 64 KiB
                http2_protocol_options: {}
                common_http_protocol_options:
                  idle_timeout: 800s
                  max_stream_duration:
                    grpc_timeout_header_max: 20s
                route_config:
                  name: http
                  virtual_hosts:
                    - name: http
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: k8s_api_cluster
                            timeout: 500s
                            retry_policy:
                              retry_on: "5xx,connect-failure"
                              num_retries: 50
                              per_try_timeout: 20s
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_request(request_handle)
                          local auth_header = request_handle:headers():get("authorization")
                          if auth_header then
                            request_handle:headers():add("x-original-authorization", auth_header)
                            request_handle:headers():remove("authorization")
                          end
                          request_handle:headers():remove("host")
                          request_handle:headers():add("host", "${K8S_API_ENDPOINT}")
                          request_handle:headers():add("authorization", "Bearer ${JWT_TOKEN}")
                        end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"  # Log to stdout, can be a file path
                      log_format:
                        json_format:
                          start_time: "%START_TIME%"
                          timestamp: "%START_TIME(%s)%"
                          request_method: "%REQ(:METHOD)%"
                          request_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          original_host: "%REQ(:HOST)%"
                          response_code: "%RESPONSE_CODE%"
                          duration: "%DURATION%"
                          bytes_sent: "%BYTES_SENT%"
                          host: "%REQ(:AUTHORITY)%"
                          user_agent: "%REQ(User-Agent)%"
                          client_ip: "%REQ(X-Forwarded-For)%"
                          request_size: "%REQ(:CONTENT_LENGTH)%"
                          response_size: "%RESP(:CONTENT_LENGTH)%"
                          upstream_host: "%UPSTREAM_HOST%"
                          upstream_cluster: "%UPSTREAM_CLUSTER%"
                          upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
                          trace_id: "%REQ(X-B3-TraceId)%"
                          failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                          protocol: "%PROTOCOL%"
                          request_flags: "%RESPONSE_FLAGS%"
                          retries: "%RESP(X-Envoy-Retry-Count)%"
                          tls_version: "%UPSTREAM_TLS_VERSION%"
                          tls_cipher: "%UPSTREAM_TLS_CIPHER%"


          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  - certificate_chain:
                      filename: "/tls/server.crt"
                    private_key:
                      filename: "/tls/server.key"
                validation_context:
                  trusted_ca:
                    filename: "/tls/ca.crt"
  clusters:
    - name: k8s_api_cluster
      connect_timeout: 20s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      dns_refresh_rate: 300s  # Refresh DNS every 30 seconds
      http2_protocol_options:
        connection_keepalive:
          interval: 1s  # Interval between keepalive pings
          timeout: 10s  # Timeout for receiving PING ACK
      common_http_protocol_options:
        idle_timeout: 200s
        max_connection_duration: 300s
      load_assignment:
        cluster_name: k8s_api_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "${K8S_API_ENDPOINT}"
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trust_chain_verification: ACCEPT_UNTRUSTED
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options:
              initial_stream_window_size: 65536  # 64 KiB
              initial_connection_window_size: 1048576  # 1 MiB

layered_runtime:
  layers:
  - name: static_layer_0
    static_layer:
      envoy:
        resource_limits:
          listener:
            example_listener_name:
              connection_limit: 10000
      overload:
        global_downstream_max_connections: 50000


