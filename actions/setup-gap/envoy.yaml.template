static_resources:
  listeners:
    - name: https
      address:
        socket_address:
          address: 0.0.0.0
          port_value: "${PROXY_PORT}"
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: http
                route_config:
                  name: http
                  virtual_hosts:
                    - name: http
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: k8s_api_cluster
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        JSON = (loadfile "/etc/envoy/json.lua")() -- one-time load of the routines
                        local jwt_expiration = 0
                        local jwt_token = nil
                        local refreshing = false
                        local request_options = {["asynchronous"] = true}

                        -- Function to fetch GitHub OIDC token
                        function fetch_github_oidc_token(request_handle)
                            if refreshing then
                                return -- Prevent multiple concurrent refreshes
                            end
                            refreshing = true

                            -- Set the audience and the GitHub OIDC token URL
                            local audience = "gap"
                            local oidc_url = "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=" .. audience

                            -- Prepare headers
                            local headers = {
                                [":method"] = "GET",
                                [":path"] = oidc_url,
                                [":authority"] = "${GITHUB_OIDC_HOSTNAME}",
                                ["Authorization"] = "Bearer " .. "${ACTIONS_ID_TOKEN_REQUEST_TOKEN}", -- Use environment variable
                                ["accept"] = "application/json",
                            }

                            -- Make the HTTP call
                            local response_headers, response_body = request_handle:httpCall(
                                "github_oidc_endpoint",
                                headers,
                                nil, -- No body for GET requests
                                3000 -- Timeout in milliseconds
                            )

                            if response_headers[":status"] == "200" then
                                request_handle:logInfo("GitHub OIDC token fetched successfully.")
                                request_handle:logInfo(response_body)
                                local data = JSON.decode(response_body)
                                jwt_token = data.value -- Assign the token value
                                jwt_expiration = os.time() + 300 -- Tokens are valid for 5 minutes
                            else
                                request_handle:logErr("Failed to fetch GitHub OIDC token. Status: " .. response_headers[":status"])
                            end

                            refreshing = false
                        end

                        -- Function to refresh the token if needed
                        function refresh_token_if_needed(request_handle)
                            local current_time = os.time()
                            if not jwt_token or jwt_expiration - current_time < 60 then
                                fetch_github_oidc_token(request_handle)
                            end
                        end

                        -- Main function for Envoy request interception
                        function envoy_on_request(request_handle)
                            refresh_token_if_needed(request_handle)
                            if jwt_token then
                                request_handle:headers():add("x-authorization-github-jwt", "Bearer " .. jwt_token)
                            end
                            request_handle:headers():remove("host")
                            request_handle:headers():add("host", "${K8S_API_ENDPOINT}")
                        end

                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout" # Log to stdout, can be a file path
                      log_format:
                        json_format:
                          start_time: "%START_TIME%"
                          request_method: "%REQ(:METHOD)%"
                          request_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          response_code: "%RESPONSE_CODE%"
                          duration: "%DURATION%"
                          bytes_sent: "%BYTES_SENT%"
                          host: "%REQ(:AUTHORITY)%"
                          user_agent: "%REQ(User-Agent)%"
                          client_ip: "%REQ(X-Forwarded-For)%"
                          request_size: "%REQ(:CONTENT_LENGTH)%"
                          upstream_host: "%UPSTREAM_HOST%"
                          trace_id: "%REQ(X-B3-TraceId)%"
                          response_size: "%RESP(:CONTENT_LENGTH)%"
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  - certificate_chain:
                      filename: "/tls/server.crt"
                    private_key:
                      filename: "/tls/server.key"
                validation_context:
                  trusted_ca:
                    filename: "/tls/ca.crt"
    - name: dynamic_forward_proxy_upgrade
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9999
      traffic_direction: OUTBOUND
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                http_filters:
                  - name: envoy.filters.http.dynamic_forward_proxy
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
                      dns_cache_config:
                        name: dynamic_forward_proxy_cache_config
                        dns_lookup_family: V4_ONLY

                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        JSON = (loadfile "/etc/envoy/json.lua")() -- one-time load of the routines
                        local jwt_expiration = 0
                        local jwt_token = nil
                        local refreshing = false
                        local request_options = {["asynchronous"] = true}

                        -- Function to fetch GitHub OIDC token
                        function fetch_github_oidc_token(request_handle)
                            if refreshing then
                                return -- Prevent multiple concurrent refreshes
                            end
                            refreshing = true

                            -- Set the audience and the GitHub OIDC token URL
                            local audience = "gap"
                            local oidc_url = "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=" .. audience

                            -- Prepare headers
                            local headers = {
                                [":method"] = "GET",
                                [":path"] = oidc_url,
                                [":authority"] = "${GITHUB_OIDC_HOSTNAME}",
                                ["Authorization"] = "Bearer " .. "${ACTIONS_ID_TOKEN_REQUEST_TOKEN}", -- Use environment variable
                                ["accept"] = "application/json",
                            }

                            -- Make the HTTP call
                            local response_headers, response_body = request_handle:httpCall(
                                "github_oidc_endpoint",
                                headers,
                                nil, -- No body for GET requests
                                3000 -- Timeout in milliseconds
                            )

                            if response_headers[":status"] == "200" then
                                request_handle:logInfo("GitHub OIDC token fetched successfully.")
                                request_handle:logInfo(response_body)
                                local data = JSON.decode(response_body)
                                jwt_token = data.value -- Assign the token value
                                jwt_expiration = os.time() + 300 -- Tokens are valid for 5 minutes
                            else
                                request_handle:logErr("Failed to fetch GitHub OIDC token. Status: " .. response_headers[":status"])
                            end

                            refreshing = false
                        end

                        -- Function to refresh the token if needed
                        function refresh_token_if_needed(request_handle)
                            local current_time = os.time()
                            if not jwt_token or jwt_expiration - current_time < 60 then
                                fetch_github_oidc_token(request_handle)
                            end
                        end

                        -- Main function for Envoy request interception
                        function envoy_on_request(request_handle)
                            refresh_token_if_needed(request_handle)
                            if jwt_token then
                                request_handle:headers():add("x-authorization-github-jwt", "Bearer " .. jwt_token)
                            end
                        end

                  - name: envoy.filters.http.router
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                http2_protocol_options:
                  allow_connect: true
                http3_protocol_options:
                  allow_extended_connect: true
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains:
                        - '*'
                      routes:
                        - match:
                            prefix: /
                          route:
                            cluster: dynamic_forward_proxy_cluster
                        - match:
                            connect_matcher: {}
                          route:
                            cluster: dynamic_forward_proxy_cluster
                            upgrade_configs:
                              - upgrade_type: CONNECT
                                connect_config: {}
                stat_prefix: dynamic_forward_proxy_upgrade
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  - certificate_chain:
                      filename: /tls/server.crt
                    private_key:
                      filename: /tls/server.key
                validation_context:
                  trusted_ca:
                    filename: /tls/ca.crt
  clusters:
    - name: k8s_api_cluster
      connect_timeout: 10s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      common_http_protocol_options:
        idle_timeout: 60s
        max_connection_duration: 900s
      http2_protocol_options:
        connection_keepalive:
          interval: 1s
          timeout: 10s
      load_assignment:
        cluster_name: k8s_api_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "${K8S_API_ENDPOINT}"
                      port_value: "${K8S_API_ENDPOINT_PORT}"
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trusted_ca:
                filename: "/tls/aws-ca.crt"
              trust_chain_verification: VERIFY_TRUST_CHAIN

    - name: github_oidc_endpoint
      connect_timeout: 5s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: github_oidc_endpoint
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "${GITHUB_OIDC_HOSTNAME}"
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext

    - name: dynamic_forward_proxy_cluster
      connect_timeout: 5s
      dns_lookup_family: V4_ONLY
      lb_policy: CLUSTER_PROVIDED
      cluster_type:
        name: envoy.clusters.dynamic_forward_proxy
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
          allow_coalesced_connections: true
          dns_cache_config:
            name: dynamic_forward_proxy_cache_config
            dns_lookup_family: V4_ONLY
