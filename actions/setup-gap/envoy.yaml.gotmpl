static_resources:
  listeners:

    # Listener for Kubernetes API traffic
    - name: k8s-api
      address:
        socket_address:
          address: 0.0.0.0
          port_value: "{{ getenv "PROXY_PORT" }}"
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: http
                route_config:
                  name: http
                  virtual_hosts:
                    - name: http
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: k8s_api_cluster
                            host_rewrite_literal: "gap-k8s-api.{{ getenv "MAIN_DNS_ZONE" }}"
                            retry_policy:
                              retry_on: connect-failure,refused-stream,gateway-error,deadline-exceeded,unavailable,internal,reset
                              num_retries: 5
                              retry_back_off:
                                base_interval: "1s"
                                max_interval: "5s"
                http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        path_prefix: '/check'
                        server_uri:
                          uri: {{ getenv "AUTH_SERVICE_NAME" }}:{{ getenv "AUTH_SERVICE_PORT" }}
                          cluster: ext_authz_service
                          timeout: 1s
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: "x-repository"
                              - exact: "{{ getenv "GITHUB_OIDC_TOKEN_HEADER_NAME" }}"
                              - exact: ":authority"
                      failure_mode_allow: false
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      log_format:
                        json_format:
                          start_time: "%START_TIME%"  # Timestamp of the request start
                          request_method: "%REQ(:METHOD)%"  # HTTP method (e.g., GET, POST)
                          request_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"  # Request path
                          response_code: "%RESPONSE_CODE%"  # HTTP response code
                          duration: "%DURATION%"  # Total duration of the request in milliseconds
                          bytes_sent: "%BYTES_SENT%"  # Bytes sent in the response
                          host: "%REQ(:AUTHORITY)%"  # Host header
                          user_agent: "%REQ(User-Agent)%"  # User-Agent header
                          client_ip: "%REQ(X-Forwarded-For)%"  # Client IP from X-Forwarded-For header
                          request_size: "%REQ(:CONTENT-LENGTH)%"  # Size of the request body
                          upstream_host: "%UPSTREAM_HOST%"  # Upstream host handling the request
                          trace_id: "%REQ(X-B3-TraceId)%"  # Trace ID for distributed tracing
                          response_size: "%RESP(:CONTENT-LENGTH)%"  # Size of the response body
                          protocol: "%PROTOCOL%"  # HTTP protocol (e.g., HTTP/1.1, HTTP/2)
                          response_flags: "%RESPONSE_FLAGS%"  # Envoy response flags (e.g., NR, UH)
                          upstream_cluster: "%UPSTREAM_CLUSTER%"  # Upstream cluster name
                          request_id: "%REQ(X-Request-Id)%"  # Request ID for correlation
                          x_repository: "%REQ(x-repository)%" # Repo name prefixed with the org
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_params:
                  tls_minimum_protocol_version: TLSv1_2
                tls_certificates:
                  - certificate_chain:
                      filename: "/tls/server.crt"
                    private_key:
                      filename: "/tls/server.key"
                validation_context:
                  trusted_ca:
                    filename: "/tls/ca.crt"

    # Listener for dynamic forward proxy traffic
    - name: dynamic-proxy
      address:
        socket_address:
          address: 0.0.0.0
          port_value: "{{ getenv "DYNAMIC_PROXY_PORT" }}"
      listener_filters:
        - name: envoy.filters.listener.tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
        - name: envoy.filters.listener.http_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector
      filter_chains:
        - transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                alpn_protocols: "h2,http/1.1"
                tls_params:
                  tls_minimum_protocol_version: TLSv1_2
                tls_certificates:
                  - certificate_chain:
                      filename: /tls/server.crt
                    private_key:
                      filename: /tls/server.key
                validation_context:
                  trusted_ca:
                    filename: "/tls/ca.crt"
          filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                route_config:
                  virtual_hosts:
                    - name: dynamic_forward_host
                      domains: ["*.{{ getenv "MAIN_DNS_ZONE" }}"]
                      routes:
                        - match:
                            prefix: /
                          route:
                            cluster: dynamic_forward_proxy_cluster
                            retry_policy:
                              retry_on: connect-failure,refused-stream,gateway-error,deadline-exceeded,unavailable,internal,reset
                              num_retries: 5
                              host_selection_retry_max_attempts: 5
                              retry_back_off:
                                base_interval: "1s"
                                max_interval: "5s"
                          typed_per_filter_config:
                            envoy.filters.http.dynamic_forward_proxy:
                              '@type': type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig
                    - name: localhost_host
                      domains: ["localhost", "127.0.0.1", "localhost:{{ getenv "DYNAMIC_PROXY_PORT" }}", "127.0.0.1:{{ getenv "DYNAMIC_PROXY_PORT" }}"]
                      routes:
                        - match:
                            prefix: '/'
                          direct_response:
                            status: 200
                            body:
                              inline_string: "OK - Envoy is operating normally"
                http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        path_prefix: '/check'
                        server_uri:
                          uri: {{ getenv "AUTH_SERVICE_NAME" }}:{{ getenv "AUTH_SERVICE_PORT" }}
                          cluster: ext_authz_service
                          timeout: 1s
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: "x-repository"
                              - exact: "{{ getenv "GITHUB_OIDC_TOKEN_HEADER_NAME" }}"
                              - exact: ":authority"
                      allowed_headers:
                        patterns:
                          - exact: ":authority"
                      failure_mode_allow: false
                  - name: envoy.filters.http.dynamic_forward_proxy
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
                      dns_cache_config:
                        name: dynamic_forward_proxy_cache_config
                        dns_lookup_family: V4_ONLY
                        dns_resolution_config:
                          resolvers:
                            - socket_address:
                                address: 8.8.8.8
                                port_value: 53
                          dns_resolver_options:
                            use_tcp_for_dns_lookups: true
                        host_ttl: 60s
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      log_format:
                        json_format:
                          start_time: "%START_TIME%"  # Timestamp of the request start
                          request_method: "%REQ(:METHOD)%"  # HTTP method (e.g., GET, POST)
                          request_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"  # Request path
                          response_code: "%RESPONSE_CODE%"  # HTTP response code
                          duration: "%DURATION%"  # Total duration of the request in milliseconds
                          bytes_sent: "%BYTES_SENT%"  # Bytes sent in the response
                          host: "%REQ(:AUTHORITY)%"  # Host header
                          user_agent: "%REQ(User-Agent)%"  # User-Agent header
                          client_ip: "%REQ(X-Forwarded-For)%"  # Client IP from X-Forwarded-For header
                          request_size: "%REQ(:CONTENT-LENGTH)%"  # Size of the request body
                          upstream_host: "%UPSTREAM_HOST%"  # Upstream host handling the request
                          trace_id: "%REQ(X-B3-TraceId)%"  # Trace ID for distributed tracing
                          response_size: "%RESP(:CONTENT-LENGTH)%"  # Size of the response body
                          protocol: "%PROTOCOL%"  # HTTP protocol (e.g., HTTP/1.1, HTTP/2)
                          response_flags: "%RESPONSE_FLAGS%"  # Envoy response flags (e.g., NR, UH)
                          upstream_cluster: "%UPSTREAM_CLUSTER%"  # Upstream cluster name
                          request_id: "%REQ(X-Request-Id)%"  # Request ID for correlation
                          x_repository: "%REQ(x-repository)%" # Repo name prefixed with the org

    # Listener for WebSocket traffic
    - name: webosckets_listener
      address:
        socket_address:
          address: 0.0.0.0
          port_value: "{{ getenv "WEBSOCKETS_PROXY_PORT" }}"
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                upgrade_configs:
                  - upgrade_type: websocket
                http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        path_prefix: '/check'
                        server_uri:
                          uri: {{ getenv "AUTH_SERVICE_NAME" }}:{{ getenv "AUTH_SERVICE_PORT" }}
                          cluster: ext_authz_service
                          timeout: 1s
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: "x-repository"
                              - exact: "{{ getenv "GITHUB_OIDC_TOKEN_HEADER_NAME" }}"
                              - exact: ":authority"
                      failure_mode_allow: false
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: gap_ws_echo
                      domains: ["gap-ws-echo.{{ getenv "MAIN_DNS_ZONE" }}*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: gap_ws_echo
                            retry_policy:
                              retry_on: connect-failure,refused-stream,gateway-error,deadline-exceeded,unavailable,internal,reset
                              num_retries: 5
                              host_selection_retry_max_attempts: 5
                              retry_back_off:
                                base_interval: "1s"
                                max_interval: "5s"
                    - name: localhost_host
                      domains: [ "localhost", "127.0.0.1", "localhost:{{ getenv "WEBSOCKETS_PROXY_PORT" }}", "127.0.0.1:{{ getenv "WEBSOCKETS_PROXY_PORT" }}"]
                      routes:
                        - match:
                            prefix: '/'
                          direct_response:
                            status: 200
                            body:
                              inline_string: "OK - Envoy is operating normally"
                  {{- if getenv "WEBSOCKETS_SERVICES" }}
                    {{- $services := getenv "WEBSOCKETS_SERVICES" | strings.Split "," }}
                    {{- range $services }}
                    - name: {{ replaceAll "-" "_" . }}
                      domains: ["{{ . }}.{{ getenv "MAIN_DNS_ZONE" }}*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: {{ replaceAll "-" "_" . }}
                            retry_policy:
                              retry_on: connect-failure,refused-stream,gateway-error,deadline-exceeded,unavailable,internal,reset
                              num_retries: 5
                              host_selection_retry_max_attempts: 5
                              retry_back_off:
                                base_interval: "1s"
                                max_interval: "5s"
                    {{- end }}
                  {{- end }}

                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      log_format:
                        json_format:
                          start_time: "%START_TIME%"  # Timestamp of the request start
                          request_method: "%REQ(:METHOD)%"  # HTTP method (e.g., GET, POST)
                          request_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"  # Request path
                          response_code: "%RESPONSE_CODE%"  # HTTP response code
                          duration: "%DURATION%"  # Total duration of the request in milliseconds
                          bytes_sent: "%BYTES_SENT%"  # Bytes sent in the response
                          host: "%REQ(:AUTHORITY)%"  # Host header
                          user_agent: "%REQ(User-Agent)%"  # User-Agent header
                          client_ip: "%REQ(X-Forwarded-For)%"  # Client IP from X-Forwarded-For header
                          request_size: "%REQ(:CONTENT-LENGTH)%"  # Size of the request body
                          upstream_host: "%UPSTREAM_HOST%"  # Upstream host handling the request
                          trace_id: "%REQ(X-B3-TraceId)%"  # Trace ID for distributed tracing
                          response_size: "%RESP(:CONTENT-LENGTH)%"  # Size of the response body
                          protocol: "%PROTOCOL%"  # HTTP protocol (e.g., HTTP/1.1, HTTP/2)
                          response_flags: "%RESPONSE_FLAGS%"  # Envoy response flags (e.g., NR, UH)
                          upstream_cluster: "%UPSTREAM_CLUSTER%"  # Upstream cluster name
                          request_id: "%REQ(X-Request-Id)%"  # Request ID for correlation
                          x_repository: "%REQ(x-repository)%" # Repo name prefixed with the org
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                alpn_protocols: "h2,http/1.1"
                tls_params:
                  tls_minimum_protocol_version: TLSv1_2
                tls_certificates:
                  - certificate_chain:
                      filename: "/tls/server.crt"
                    private_key:
                      filename: "/tls/server.key"
                validation_context:
                  trusted_ca:
                    filename: "/tls/ca.crt"
  clusters:

    # Cluster for Kubernetes API
    - name: k8s_api_cluster
      connect_timeout: 10s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      common_http_protocol_options:
        idle_timeout: 60s
        max_connection_duration: 900s
      http2_protocol_options:
        connection_keepalive:
          interval: 1s
          timeout: 10s
      load_assignment:
        cluster_name: k8s_api_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "gap-k8s-api.{{ getenv "MAIN_DNS_ZONE" }}"
                      port_value: "{{ getenv "K8S_API_ENDPOINT_PORT" }}"
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trusted_ca:
                filename: "/tls/aws-ca.crt"
              trust_chain_verification: VERIFY_TRUST_CHAIN

    - name: dynamic_forward_proxy_cluster
      connect_timeout: 5s
      http2_protocol_options: {}
      lb_policy: CLUSTER_PROVIDED
      cluster_type:
        name: envoy.clusters.dynamic_forward_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
          dns_cache_config:
            name: dynamic_forward_proxy_cache_config
            dns_lookup_family: V4_ONLY
            dns_resolution_config:
              resolvers:
                - socket_address:
                    address: 8.8.8.8
                    port_value: 53
              dns_resolver_options:
                use_tcp_for_dns_lookups: true
            host_ttl: 60s
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trusted_ca:
                filename: /etc/ssl/certs/ca-certificates.crt

    # Cluster for WebSocket echo service
    - name: gap_ws_echo
      connect_timeout: 5s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: gap_ws_echo
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "gap-ws-echo.{{ getenv "MAIN_DNS_ZONE" }}"
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: "gap-ws-echo.{{ getenv "MAIN_DNS_ZONE" }}"
          dns_cache_config:
            name: gap_ws_echo_cache_config
            dns_lookup_family: V4_ONLY
            dns_resolution_config:
              resolvers:
                - socket_address:
                    address: 8.8.8.8
                    port_value: 53
              dns_resolver_options:
                use_tcp_for_dns_lookups: true
            host_ttl: 60s

    {{- if getenv "WEBSOCKETS_SERVICES" }}
      {{- $services := getenv "WEBSOCKETS_SERVICES" | strings.Split "," }}
      {{- range $services }}
      {{- $clusterName := replaceAll "-" "_" . }}
      # Cluster for WebSocket {{ . }} service
    - name: {{ $clusterName }}
      connect_timeout: 5s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: {{ $clusterName }}
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "{{ . }}.{{ getenv "MAIN_DNS_ZONE" }}"
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: "{{ . }}.{{ getenv "MAIN_DNS_ZONE" }}"
          dns_cache_config:
            name: {{ $clusterName }}_cache_config
            dns_lookup_family: V4_ONLY
            dns_resolution_config:
              resolvers:
                - socket_address:
                    address: 8.8.8.8
                    port_value: 53
              dns_resolver_options:
                use_tcp_for_dns_lookups: true
            host_ttl: 60s
      {{- end }}
    {{- end }}

    # External authorization service cluster
    - name: ext_authz_service
      connect_timeout: 1s
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: ext_authz_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: "{{ getenv "AUTH_SERVICE_NAME" }}"
                      port_value: "{{ getenv "AUTH_SERVICE_PORT" }}"
