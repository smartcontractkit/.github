name: setup-gap
description: "setup github actions proxy"

inputs:
  # general inputs
  gap-name:
    description:
      "The name of the GAP. Used in the dir name for self-signed certs and the
      docker container name. Required if using multiple invocations of this in
      the same job."
    required: false
    default: execute-api
  use-tls:
    description:
      "Enable TLS for the local envoy proxy container. Ignored if `use-k8s:
      true` as that input will automatically use TLS."
    required: false
    default: "false"
  proxy-port:
    description: "The port the proxy will listen on. Defaults to 8080."
    required: false
    default: "8080"
  # aws role inputs
  aws-role-duration-seconds:
    description:
      "The duration in seconds for the assumed role. Defaults to 900 (15
      minutes)."
    required: false
    default: "900"
  aws-region:
    description:
      "The AWS region for the api gateway and other resources unless specified
      in other inputs"
    required: false
  aws-role-arn:
    description:
      "The AWS role with API Gateway invoke permissions, ECR pull permissions
      for aws-sigv4-proxy, and if for k8s then EKS describe permissions"
    required: false
  # k8s inputs
  use-k8s:
    description:
      "Whether to setup GAP for communicating with K8s. Cannot be used with
      use-argocd. Defaults to false."
    required: false
    default: "false"
  k8s-cluster-name:
    description: "The EKS cluster name to target. Required if use-k8s is true."
    required: false
  k8s-cluster-aws-region:
    description:
      "The region for the EKS cluster, if different from aws-region input."
    required: false
  envoy-proxy-image:
    description: "Envoy Proxy image used to run Envoy proxy for GAP"
    required: false
    default: "envoyproxy/envoy:1.33.0-dev-79d14e"
  k8s-api-endpoint:
    required: true
    description: "Endpoint"
outputs:
  gh-jwt-token:
    description: "GitHub JWT token to be used for GAP requests"
    value: ${{ steps.get-jwt-token.outputs.token }}

runs:
  using: composite
  steps:
    - name: Assume role
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: true

    - name: Setup Certificate Authority
      # Generate a local ephemeral CA key and cert to sign the local proxy's certificate.
      # ---
      # Kubectl requires a TLS connection to it's configured endpoint, and performs certificate
      # validation through the CA configured in the kubeconfig.
      # The local envoy container will act as the k8s endpoint for kubectl, and therefore requires a
      # certificate signed by a trusted CA. Because this is for local TLS we can generate a CA, generate a server
      # certificate, sign the server certificate with the CA, and update the CA in the kubeconfig to trust it.
      # Also useful for other use-cases where a local TLS connection is required.
      if: inputs.use-k8s == 'true' || inputs.use-tls == 'true'
      shell: bash
      env:
        PATH_CERTS_DIR_PREFIX: /tmp/setup-gap
      run: |
        PATH_CERTS_DIR="${PATH_CERTS_DIR_PREFIX}-${{ inputs.gap-name }}"
        echo "PATH_CERTS_DIR=${PATH_CERTS_DIR}" | tee -a $GITHUB_ENV
        mkdir -p "${PATH_CERTS_DIR}"

        echo "::debug::Generating new CA key+cert. Writing them to ${PATH_CERTS_DIR}/ca.key and ${PATH_CERTS_DIR}/ca.crt"
        openssl ecparam -genkey -name prime256v1 -out "${PATH_CERTS_DIR}/ca.key"
        openssl req -x509 -new \
          -nodes -key "${PATH_CERTS_DIR}/ca.key" \
          -sha256 \
          -days 1 \
          -out "${PATH_CERTS_DIR}/ca.crt" \
          -subj "/CN=My CA"

    - name: Generate and Sign Server Certificate
      if: inputs.use-k8s == 'true' || inputs.use-tls == 'true'
      shell: bash
      run: |
        echo "::debug::Generating server key and certificate signing request (CSR)"
        openssl ecparam -genkey -name prime256v1 -out "${PATH_CERTS_DIR}/server.key"
        openssl req -new \
          -key "${PATH_CERTS_DIR}/server.key" \
          -out "${PATH_CERTS_DIR}/server.csr" \
          -subj "/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"

        echo "::debug::Generating SAN extension file"
        echo -e "subjectAltName=DNS:localhost,IP:127.0.0.1" > "${PATH_CERTS_DIR}/san.ext"

        echo "::debug::Signing server certificate with CA"
        openssl x509 -req -in "${PATH_CERTS_DIR}/server.csr" \
          -CA "${PATH_CERTS_DIR}/ca.crt" \
          -CAkey "${PATH_CERTS_DIR}/ca.key" \
          -CAcreateserial \
          -out "${PATH_CERTS_DIR}/server.crt" \
          -days 1 \
          -sha256 \
          -extfile "${PATH_CERTS_DIR}/san.ext"

        echo "::debug::Removing CSR and SAN extension files"
        rm "${PATH_CERTS_DIR}/server.csr" "${PATH_CERTS_DIR}/san.ext"

    - name: Setup Kubeconfig (K8s only)
      if: inputs.use-k8s == 'true'
      shell: bash
      run: |
        echo "::debug::Getting kubeconfig"
        aws eks update-kubeconfig --name ${{ inputs.k8s-cluster-name }} --region ${{ inputs.k8s-cluster-aws-region || inputs.aws-region }}

        # Get cluster arn for modifying kubeconfig
        CLUSTER_ARN=$(aws eks describe-cluster --name ${{ inputs.k8s-cluster-name }} --region ${{ inputs.k8s-cluster-aws-region || inputs.aws-region }} --query "cluster.arn" --output text)
        echo "::add-mask::${CLUSTER_ARN}"

        echo "::debug::Setting up kubeconfig for localhost proxy"

        kubectl config set clusters."$CLUSTER_ARN".server "https://localhost:${{ inputs.proxy-port }}"

        # Set the certificate-authority to the ephemeral certificate authority configured above
        kubectl config set clusters.$CLUSTER_ARN.certificate-authority "${PATH_CERTS_DIR}/ca.crt"

        # Remove certificate-authority-data populated from `aws eks update-kubeconfig` which is for the endpoint which is not publicly accessible
        kubectl config unset clusters.$CLUSTER_ARN.certificate-authority-data

    - name: Get GH JWT Token
      if: inputs.use-k8s == 'true'
      id: get-jwt-token
      uses: actions/github-script@v7
      with:
        script: |
          const audience = 'gap';
          const id_token = await core.getIDToken(audience);
          core.setOutput('token', id_token);

    - name: Run Envoy proxy
      if: inputs.use-k8s == 'true'
      shell: sh
      env:
        PROXY_PORT: ${{ inputs.proxy-port }}
        JWT_TOKEN: ${{ steps.get-jwt-token.outputs.token }}
        K8S_API_ENDPOINT: ${{ inputs.k8s-api-endpoint}}
        ENVOY_PROXY_IMAGE: ${{ inputs.envoy-proxy-image }}
      run: |
        # Generate Envoy config from template
        ls -l
        envsubst < "${GITHUB_ACTION_PATH}/envoy.yaml.template" > "${GITHUB_ACTION_PATH}/envoy.yaml"

        # Copy AWS CA certs
        cp ${{ github.action_path }}/aws-ca.crt "${PATH_CERTS_DIR}"
        chmod 644 "${PATH_CERTS_DIR}/server.key"

        cat "${GITHUB_ACTION_PATH}/envoy.yaml"

        docker run --rm -d \
          --name "gap-v2" \
          -p "${PROXY_PORT}:${PROXY_PORT}" \
          -v "${PATH_CERTS_DIR}":/tls \
          -v "${GITHUB_ACTION_PATH}/envoy.yaml":/etc/envoy/envoy.yaml \
          "${ENVOY_PROXY_IMAGE}" \
          /usr/local/bin/envoy -c /etc/envoy/envoy.yaml --log-level debug

        docker ps

        echo "${PROXY_PORT}"

    - name: Verify Envoy Proxy
      if: inputs.use-k8s == 'true'
      shell: bash
      env:
        PROXY_PORT: ${{ inputs.proxy-port }}
      run: |
        # Check if the Envoy proxy is up and running on HTTPS port "${PROXY_PORT}"
        for attempt in {1..10}; do
          if curl --cacert "${PATH_CERTS_DIR}/ca.crt" https://localhost:${PROXY_PORT} > /dev/null 2>&1; then
            echo "Envoy proxy is up, and the HTTPS connection is successful."
            exit 0
          else
            echo "Waiting for the Envoy proxy to start... Attempt ${attempt}/10"
            sleep 3
          fi
        done

        echo "Timed out waiting for the Envoy proxy to start."
        exit 1
