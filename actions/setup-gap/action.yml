name: setup-gap
description: "setup github actions proxy"

inputs:
  # general inputs
  gap-name:
    description:
      "The name of the GAP. Used in the dir name for self-signed certs and the
      docker container name. Required if using multiple invocations of this in
      the same job."
    required: false
    default: "default"
  use-tls:
    description:
      "Enable TLS for the local envoy proxy container. Ignored if `use-k8s:
      true` as that input will automatically use TLS."
    required: false
    default: "false"
  proxy-port:
    description: "The port the proxy will listen on. Defaults to 8080."
    required: false
    default: "8080"
  ca-cert-validity-days:
    description:
      "The number of days the CA certificate is valid for. Defaults to 1."
    required: false
    default: "1"
  cert-validity-days:
    description:
      "The number of days the server certificate is valid for. Defaults to 1."
    required: false
    default: "1"
  # aws role inputs
  aws-role-duration-seconds:
    description:
      "The duration in seconds for the assumed role. Defaults to 900 (15
      minutes)."
    required: false
    default: "900"
  aws-region:
    description: "The AWS region resources unless specified in other inputs"
    required: false
  aws-role-arn:
    description:
      "The AWS role with API Gateway invoke permissions, ECR pull permissions
      for aws-sigv4-proxy, and if for k8s then EKS describe permissions"
    required: false
  # k8s inputs
  use-k8s:
    description:
      "Whether to setup GAP for communicating with K8s. Cannot be used with
      use-argocd. Defaults to false."
    required: false
    default: "false"
  k8s-cluster-name:
    description: "The EKS cluster name to target. Required if use-k8s is true."
    required: false
  k8s-cluster-aws-region:
    description:
      "The region for the EKS cluster, if different from aws-region input."
    required: false
  k8s-api-endpoint:
    required: true
    description: "The Kubernetes API server's endpoint hostname."
  k8s-api-endpoint-port:
    required: false
    default: "443"
    description: "The port number for accessing the Kubernetes API server."
  # local proxy inputs
  enable-proxy-debug:
    required: false
    default: "false"
    description:
      "Enable or disable detailed Envoy proxy logs used for K8s API access. When
      enabled, debug logs are generated locally, and container logs are streamed
      to the console for troubleshooting."
  envoy-github-oidc-token-header-name:
    required: false
    default: "x-authorization-github-jwt"
    description:
      "Specifies the name of the HTTP header used to pass the GitHub OIDC JWT
      token. This header is automatically injected by the local proxy and must
      not be the same as the default 'Authorization' header."
  envoy-proxy-image:
    description: "Envoy Proxy image used to run Envoy proxy for GAP"
    required: false
    default: "envoyproxy/envoy:v1.32.0"
outputs:
  local-proxy-port:
    description: "The port the local proxy will listen on."
    value: ${{ inputs.proxy-port }}

runs:
  using: composite
  steps:
    - name: Assume role
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: true

    - name: Setup Certificate Authority
      # Generate a local ephemeral CA key and cert to sign the local proxy's certificate.
      # ---
      # Kubectl requires a TLS connection to it's configured endpoint, and performs certificate
      # validation through the CA configured in the kubeconfig.
      # The local envoy container will act as the k8s endpoint for kubectl, and therefore requires a
      # certificate signed by a trusted CA. Because this is for local TLS we can generate a CA, generate a server
      # certificate, sign the server certificate with the CA, and update the CA in the kubeconfig to trust it.
      # Also useful for other use-cases where a local TLS connection is required.
      if: inputs.use-k8s == 'true' || inputs.use-tls == 'true'
      shell: bash
      env:
        GAP_NAME: ${{ inputs.gap-name }}
        PATH_CERTS_DIR_PREFIX: /tmp/setup-gap
        CA_CERT_VALIDITY_DAYS: ${{ inputs.ca-cert-validity-days}}
      run: |
        PATH_CERTS_DIR="${PATH_CERTS_DIR_PREFIX}-${GAP_NAME}"
        echo "PATH_CERTS_DIR=${PATH_CERTS_DIR}" | tee -a $GITHUB_ENV
        mkdir -p "${PATH_CERTS_DIR}"

        echo "::debug::Generating new CA key+cert. Writing them to ${PATH_CERTS_DIR}/ca.key and ${PATH_CERTS_DIR}/ca.crt"
        openssl ecparam -genkey -name prime256v1 -out "${PATH_CERTS_DIR}/ca.key"
        openssl req -x509 -new \
          -nodes -key "${PATH_CERTS_DIR}/ca.key" \
          -sha256 \
          -days "${CA_CERT_VALIDITY_DAYS}" \
          -out "${PATH_CERTS_DIR}/ca.crt" \
          -subj "/CN=My CA"

        echo "::debug::Adding new CA to system trust store"
        sudo mkdir -p /usr/local/share/ca-certificates/extra
        sudo cp "${PATH_CERTS_DIR}/ca.crt" "/usr/local/share/ca-certificates/extra/setup-gap-${GAP_NAME}.crt"
        sudo update-ca-certificates

    - name: Generate and Sign Server Certificate
      if: inputs.use-k8s == 'true' || inputs.use-tls == 'true'
      shell: bash
      env:
        CERT_VALIDITY_DAYS: ${{ inputs.cert-validity-days}}
      run: |
        echo "::debug::Generating server key and certificate signing request (CSR)"
        openssl ecparam -genkey -name prime256v1 -out "${PATH_CERTS_DIR}/server.key"
        openssl req -new \
          -key "${PATH_CERTS_DIR}/server.key" \
          -out "${PATH_CERTS_DIR}/server.csr" \
          -subj "/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"

        echo "::debug::Generating SAN extension file"
        echo -e "subjectAltName=DNS:localhost,IP:127.0.0.1" > "${PATH_CERTS_DIR}/san.ext"

        echo "::debug::Signing server certificate with CA"
        openssl x509 -req -in "${PATH_CERTS_DIR}/server.csr" \
          -CA "${PATH_CERTS_DIR}/ca.crt" \
          -CAkey "${PATH_CERTS_DIR}/ca.key" \
          -CAcreateserial \
          -out "${PATH_CERTS_DIR}/server.crt" \
          -days "${CERT_VALIDITY_DAYS}" \
          -sha256 \
          -extfile "${PATH_CERTS_DIR}/san.ext"

        echo "::debug::Removing CSR and SAN extension files"
        rm "${PATH_CERTS_DIR}/server.csr" "${PATH_CERTS_DIR}/san.ext"

    - name: Setup Kubeconfig (K8s only)
      if: inputs.use-k8s == 'true'
      shell: bash
      run: |
        echo "::debug::Getting kubeconfig"
        aws eks update-kubeconfig --name ${{ inputs.k8s-cluster-name }} --region ${{ inputs.k8s-cluster-aws-region || inputs.aws-region }}

        # Get cluster arn for modifying kubeconfig
        CLUSTER_ARN=$(aws eks describe-cluster --name ${{ inputs.k8s-cluster-name }} --region ${{ inputs.k8s-cluster-aws-region || inputs.aws-region }} --query "cluster.arn" --output text)
        echo "::add-mask::${CLUSTER_ARN}"

        echo "::debug::Setting up kubeconfig for localhost proxy"

        kubectl config set clusters."$CLUSTER_ARN".server "https://localhost:${{ inputs.proxy-port }}"

        # Set the certificate-authority to the ephemeral certificate authority configured above
        kubectl config set clusters.$CLUSTER_ARN.certificate-authority "${PATH_CERTS_DIR}/ca.crt"

        # Remove certificate-authority-data populated from `aws eks update-kubeconfig` which is for the endpoint which is not publicly accessible
        kubectl config unset clusters.$CLUSTER_ARN.certificate-authority-data

    - name: Run Envoy proxy
      if: inputs.use-k8s == 'true'
      shell: sh
      env:
        ENABLE_PROXY_DEBUG: ${{ inputs.enable-proxy-debug }}
        ENVOY_LOG_LEVEL: "info"
        ENVOY_PROXY_IMAGE: ${{ inputs.envoy-proxy-image }}
        ENVOY_GITHUB_OIDC_TOKEN_HEDER_NAME:
          ${{ inputs.envoy-github-oidc-token-header-name }}
        K8S_API_ENDPOINT_PORT: ${{ inputs.k8s-api-endpoint-port }}
        K8S_API_ENDPOINT: ${{ inputs.k8s-api-endpoint }}
        PROXY_PORT: ${{ inputs.proxy-port }}
      run: |
        # Get the Github OIDC hostname
        export GITHUB_OIDC_HOSTNAME=$(echo $ACTIONS_ID_TOKEN_REQUEST_URL | awk -F[/:] '{print $4}')
        if [ -z "$GITHUB_OIDC_HOSTNAME" ]; then
          echo "Error: Github OIDC hostname is empty!"
          exit 1
        else
          echo "Github OIDC hostname: $GITHUB_OIDC_HOSTNAME"
        fi

        # Generate Envoy config from template
        ls -l
        envsubst < "${GITHUB_ACTION_PATH}/envoy.yaml.template" > "${GITHUB_ACTION_PATH}/envoy.yaml"

        # Copy AWS CA certs
        cp ${{ github.action_path }}/aws-ca.crt "${PATH_CERTS_DIR}"
        chmod 644 "${PATH_CERTS_DIR}/server.key"

        # If debug is enabled, adjust log level and print config
        if [ "$ENABLE_PROXY_DEBUG" = "true" ]; then
          export ENVOY_LOG_LEVEL="debug"
          echo "Envoy log level set to DEBUG. Configuration:"
          cat "${GITHUB_ACTION_PATH}/envoy.yaml"
        fi

        docker run --rm -d \
          --name "gap-v2" \
          -p "${PROXY_PORT}:${PROXY_PORT}" \
          -v "${PATH_CERTS_DIR}":/tls \
          -v "${GITHUB_ACTION_PATH}/envoy.yaml":/etc/envoy/envoy.yaml \
          -v "${GITHUB_ACTION_PATH}/json.lua":/etc/envoy/json.lua \
          "${ENVOY_PROXY_IMAGE}" \
          /usr/local/bin/envoy -c /etc/envoy/envoy.yaml \
          --log-level "${ENVOY_LOG_LEVEL}"

    - name: Verify Envoy Proxy
      if: inputs.use-k8s == 'true'
      shell: bash
      env:
        PROXY_PORT: ${{ inputs.proxy-port }}
      run: |
        echo "Checking if the Envoy proxy is up and running on https://localhost:${PROXY_PORT} address..."
        for attempt in {1..10}; do
          if curl --cacert "${PATH_CERTS_DIR}/ca.crt" https://localhost:${PROXY_PORT} > /dev/null 2>&1; then
            echo "Envoy proxy is up, and the HTTPS connection is successful."
            exit 0
          else
            echo "Waiting for the Envoy proxy to start... Attempt ${attempt}/10"
            sleep 3
          fi
        done

        echo "Timed out waiting for the Envoy proxy to start."
        exit 1

    - name: Collect Envoy proxy logs when debug is enabled
      uses: jwalton/gh-docker-logs@2741064ab9d7af54b0b1ffb6076cf64c16f0220e # v2.2.2
      if:
        inputs.use-k8s == 'true' && (inputs.enable-proxy-debug == 'true' ||
        failure())
