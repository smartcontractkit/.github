name: setup-gap
description: "setup github actions proxy"

inputs:
  # general inputs
  api-gateway-stage-name:
    description: "The stage name for the target service on the AWS API GW."
    required: false
    default: "primary"
  gap-name:
    description:
      "The name of the GAP. Used in the dir name for self-signed certs and the
      docker container name. Required if using multiple invocations of this in
      the same job."
    required: false
    default: default
  use-tls:
    description:
      "Enable TLS for the local sigv4 proxy container. Ignored if `use-k8s:
      true` as that input will automatically use TLS."
    required: false
    default: "false"
  # aws sig4 proxy inputs
  api-gateway-host:
    description: |
      The AWS API Gateway host for the target service.
      Usually of the form <gateway id>.execute-api.<region>.amazonaws.com.
    required: true
  proxy-version:
    description:
      "The aws-sigv4-proxy image version / tag, if using the public ecr."
    required: false
    default: "1.8"
  proxy-port:
    description: "The port the proxy will listen on. Defaults to 8080."
    required: false
    default: "8080"
  duplicate-authorization-header:
    description:
      "Whether to duplicate the Authorization header to
      X-Original-Authorization. Note this is only used by the public image, it
      is on by default for the private image. Defaults to false."
    required: false
    default: "false"
  # ecr inputs
  use-private-ecr-registry:
    description:
      "Whether to use a private ECR registry to pull the aws-sigv4-proxy image.
      Defaults to false."
    required: false
    default: "false"
  ecr-private-registry:
    description:
      "The ECR registry (account id) for the aws-sigv4-proxy. Required if
      use-private-ecr-registry is true."
    required: false
  ecr-private-image-tag:
    description:
      "The aws-sigv4-proxy image tag for the private ECR registry. Defaults to a
      known tag."
    required: false
    default: "6cc1e6d2bce23c04aace47d26511ad65205975b8"
  ecr-private-aws-region:
    description:
      "The region for the private ECR registry, if different from aws-region
      input."
    required: false
  # aws role inputs
  aws-role-duration-seconds:
    description:
      "The duration in seconds for the assumed role. Defaults to 900 (15
      minutes)."
    required: false
    default: "900"
  aws-region:
    description:
      "The AWS region for the api gateway and other resources unless specified
      in other inputs"
    required: false
  aws-role-arn:
    description:
      "The AWS role with API Gateway invoke permissions, ECR pull permissions
      for aws-sigv4-proxy, and if for k8s then EKS describe permissions"
    required: false
  # argocd inputs
  use-argocd:
    description:
      "Whether to setup GAP for communicating with argocd. Cannot be used with
      use-k8s. Defaults to false."
    required: false
    default: "false"
  argocd-version:
    description: "The version of argocd to install. Defaults to 2.8.2."
    required: false
    default: "2.8.2"
  argocd-user:
    description:
      "The username for argocd login. Required if use-argocd is true."
    required: false
  argocd-pass:
    description:
      "The password for argocd login. Required if use-argocd is true."
    required: false
  # k8s inputs
  use-k8s:
    description:
      "Whether to setup GAP for communicating with K8s. Cannot be used with
      use-argocd. Defaults to false."
    required: false
    default: "false"
  k8s-cluster-name:
    description: "The EKS cluster name to target. Required if use-k8s is true."
    required: false
  k8s-cluster-aws-region:
    description:
      "The region for the EKS cluster, if different from aws-region input."
    required: false
  # grafana inputs (optional)
  metrics-job-name:
    description: "grafana metrics job name"
    required: false
  metrics-id:
    description:
      "grafana metrics id, used for continuity of metrics during job name
      changes - required if metrics-job-name is passed"
    required: false
  gc-host:
    description: "grafana hostname - required if metrics-job-name is passed"
    required: false
  gc-basic-auth:
    description: "grafana basic auth - required if metrics-job-name is passed"
    required: false
  gc-org-id:
    description:
      "grafana org/tenant id - required if metrics-job-name is passed"
    required: false

runs:
  using: composite
  steps:
    - name: Assume role
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: true

    - name: Setup Certificate Authority
      # Generate a local ephemeral CA key and cert to sign the local proxy's certificate.
      # ---
      # Kubectl requires a TLS connection to it's configured endpoint, and performs certificate
      # validation through the CA configured in the kubeconfig.
      # The local aws-sigv4-proxy container will act as the k8s endpoint for kubectl, and therefore requires a
      # certificate signed by a trusted CA. Because this is for local TLS we can generate a CA, generate a server
      # certificate, sign the server certificate with the CA, and update the CA in the kubeconfig to trust it.
      # Also useful for other use-cases where a local TLS connection is required.
      if: inputs.use-k8s == 'true' || inputs.use-tls == 'true'
      shell: bash
      env:
        PATH_CERTS_DIR_PREFIX: /tmp/setup-gap
      run: |
        PATH_CERTS_DIR="${PATH_CERTS_DIR_PREFIX}-${{ inputs.gap-name }}"
        echo "PATH_CERTS_DIR=${PATH_CERTS_DIR}" | tee -a $GITHUB_ENV
        mkdir -p "${PATH_CERTS_DIR}"

        echo "::debug::Generating new CA key+cert. Writing them to ${PATH_CERTS_DIR}/ca.key and ${PATH_CERTS_DIR}/ca.crt"
        openssl ecparam -genkey -name prime256v1 -out "${PATH_CERTS_DIR}/ca.key"
        openssl req -x509 -new \
          -nodes -key "${PATH_CERTS_DIR}/ca.key" \
          -sha256 \
          -days 1 \
          -out "${PATH_CERTS_DIR}/ca.crt" \
          -subj "/CN=My CA"

    - name: Generate and Sign Server Certificate
      if: inputs.use-k8s == 'true' || inputs.use-tls == 'true'
      shell: bash
      run: |
        echo "::debug::Generating server key and certificate signing request (CSR)"
        openssl ecparam -genkey -name prime256v1 -out "${PATH_CERTS_DIR}/server.key"
        openssl req -new \
          -key "${PATH_CERTS_DIR}/server.key" \
          -out "${PATH_CERTS_DIR}/server.csr" \
          -subj "/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"

        echo "::debug::Generating SAN extension file"
        echo -e "subjectAltName=DNS:localhost,IP:127.0.0.1" > "${PATH_CERTS_DIR}/san.ext"

        echo "::debug::Signing server certificate with CA"
        openssl x509 -req -in "${PATH_CERTS_DIR}/server.csr" \
          -CA "${PATH_CERTS_DIR}/ca.crt" \
          -CAkey "${PATH_CERTS_DIR}/ca.key" \
          -CAcreateserial \
          -out "${PATH_CERTS_DIR}/server.crt" \
          -days 1 \
          -sha256 \
          -extfile "${PATH_CERTS_DIR}/san.ext"

        echo "::debug::Removing CSR and SAN extension files"
        rm "${PATH_CERTS_DIR}/server.csr" "${PATH_CERTS_DIR}/san.ext"

    - name: Setup Kubeconfig (K8s only)
      if: inputs.use-k8s == 'true'
      shell: bash
      run: |
        echo "::debug::Getting kubeconfig"
        aws eks update-kubeconfig --name ${{ inputs.k8s-cluster-name }} --region ${{ inputs.k8s-cluster-aws-region || inputs.aws-region }}

        # Get cluster arn for modifying kubeconfig
        CLUSTER_ARN=$(aws eks describe-cluster --name ${{ inputs.k8s-cluster-name }} --region ${{ inputs.k8s-cluster-aws-region || inputs.aws-region }} --query "cluster.arn" --output text)
        echo "::add-mask::${CLUSTER_ARN}"

        echo "::debug::Setting up kubeconfig for localhost proxy"

        # Update the server to use the localhost proxy
        kubectl config set clusters.$CLUSTER_ARN.server https://localhost:${{ inputs.proxy-port }}/${{ inputs.api-gateway-stage-name }}

        # Set the certificate-authority to the ephemeral certificate authority configured above
        kubectl config set clusters.$CLUSTER_ARN.certificate-authority "${PATH_CERTS_DIR}/ca.crt"

        # Remove certificate-authority-data populated from `aws eks update-kubeconfig` which is for the endpoint which is not publicly accessible
        kubectl config unset clusters.$CLUSTER_ARN.certificate-authority-data

    - name: Login to AWS ECR (public ecr only)
      if: inputs.use-private-ecr-registry != 'true'
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      env:
        AWS_REGION: us-east-1
      with:
        registry-type: public

    - name: Run aws sig4 proxy container (public ecr only)
      if: inputs.use-private-ecr-registry != 'true'
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
        GAP_NAME: ${{ inputs.gap-name }}
      run: |
        DUPLICATE_AUTH_HEADER_FLAG=""
        if [ "${{ inputs.duplicate-authorization-header }}" == "true" ]; then
          DUPLICATE_AUTH_HEADER_FLAG="--duplicate-headers Authorization"
        fi

        docker run --rm -d \
          -e AWS_ACCESS_KEY_ID \
          -e AWS_SECRET_ACCESS_KEY \
          -e AWS_SESSION_TOKEN \
          -p "${{ inputs.proxy-port }}":"${{ inputs.proxy-port }}" \
          public.ecr.aws/aws-observability/aws-sigv4-proxy:${{ inputs.proxy-version }} \
          --name "${GAP_NAME}" --region ${{ inputs.aws-region }} \
          --host "${{ inputs.api-gateway-host }}" \
          --log-failed-requests $DUPLICATE_AUTH_HEADER_FLAG

    - name: Login to AWS ECR (private ecr only)
      if: inputs.use-private-ecr-registry == 'true'
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      env:
        AWS_REGION: ${{ inputs.ecr-private-aws-region || inputs.aws-region }}
      with:
        registries: ${{ inputs.ecr-private-registry }}

    - name: Pull from custom proxy image (private ecr only)
      if: inputs.use-private-ecr-registry == 'true'
      shell: bash
      run: |
        docker pull ${{ inputs.ecr-private-registry }}.dkr.ecr.${{ inputs.ecr-private-aws-region || inputs.aws-region }}.amazonaws.com/aws-sigv4-proxy:${{ inputs.ecr-private-image-tag }}

    - name: Run aws sig4 proxy container (private ecr only)
      if: inputs.use-private-ecr-registry == 'true'
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
      run: |
        docker run --rm -d \
          -e AWS_ACCESS_KEY_ID \
          -e AWS_SECRET_ACCESS_KEY \
          -e AWS_SESSION_TOKEN \
          -p ${{ inputs.proxy-port }}:${{ inputs.proxy-port }} \
          -v "${PATH_CERTS_DIR}":/tls \
          ${{ inputs.ecr-private-registry }}.dkr.ecr.${{ inputs.ecr-private-aws-region || inputs.aws-region }}.amazonaws.com/aws-sigv4-proxy:${{ inputs.ecr-private-image-tag }} \
            --name execute-api \
            --region ${{ inputs.aws-region }} \
            --host "${{ inputs.api-gateway-host }}" \
            --log-failed-requests \
            --port :${{ inputs.proxy-port }} \
            --enable-tls --tls-key-file /tls/server.key --tls-cert-file /tls/server.crt \
            --duplicate-headers Authorization

    - name: Setup argocd
      if: inputs.use-argocd == 'true'
      uses: clowdhaus/argo-cd-action@c38276b240079e18653fef3ea63e0a1ef3b00a1d # v2.2.0
      with:
        command: version
        options: --client
        version: ${{ inputs.argocd-version }}

    - name: Argocd login
      if: inputs.use-argocd == 'true'
      shell: bash
      run: |
        argocd login \
          localhost:${{ inputs.proxy-port }}/${{ inputs.api-gateway-stage-name }} \
          --skip-test-tls \
          --plaintext \
          --grpc-web
          --username ${{ inputs.argocd-user }} \
          --password ${{ inputs.argocd-pass }}

    - name: Collect metrics
      if: always() && inputs.metrics-job-name != ''
      id: collect-gha-metrics
      uses: smartcontractkit/push-gha-metrics-action@d9da21a2747016b3e13de58c7d4115a3d5c97935 # v3.0.1
      with:
        id: ${{ inputs.metrics-id || inputs.metrics-job-name }}
        basic-auth: ${{ inputs.gc-basic-auth }}
        hostname: ${{ inputs.gc-host }}
        org-id: ${{ inputs.gc-org-id}}
        this-job-name: ${{ inputs.metrics-job-name }}
      continue-on-error: true
