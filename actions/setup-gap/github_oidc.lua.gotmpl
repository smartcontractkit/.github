-- Load JSON library with explicit path and initialize state
local json = require("/etc/envoy/json")
local token_cache = {
  token = nil,
  expiry = 0,
  refresh_in_progress = false,
  refresh_timeout = 5000  -- 5 second timeout for token refresh
}

-- Helper to check if token needs refresh
local function needs_refresh()
  return token_cache.token == nil or os.time() + 300 >= token_cache.expiry
end

-- Helper to safely fetch token
local function fetch_token(handle)
  if token_cache.refresh_in_progress then
    -- Wait for ongoing refresh with timeout
    local start = os.time()
    while token_cache.refresh_in_progress and (os.time() - start) < 5 do
      handle:logDebug("Waiting for token refresh to complete...")
      os.execute("sleep 0.1")
    end
    return token_cache.token
  end

  token_cache.refresh_in_progress = true
  local success, response = pcall(function()
    return handle:httpCall(
      "github_oidc_endpoint",
      {
        [":method"] = "GET",
        [":path"] = handle.headers:get(":path"),
        [":authority"] = "{{ getenv "GITHUB_OIDC_HOSTNAME" }}",
        ["authorization"] = handle.headers:get("authorization")
      },
      "",
      token_cache.refresh_timeout
    )
  end)

  if success and response.headers:get(":status") == "200" then
    local body = response:body():getBytes(0, response:body():length())
    local token_data = json.decode(body)
    if token_data and token_data.value then
      token_cache.token = token_data.value
      token_cache.expiry = os.time() + 900 -- 15 minute expiry
      handle:logInfo("Token refreshed successfully")
    end
  else 
    handle:logError("Failed to refresh token: " .. tostring(response))
  end

  token_cache.refresh_in_progress = false
  return token_cache.token
end

function envoy_on_request(request_handle)
  -- Try to get cached token or refresh if needed
  local token
  if needs_refresh() then
    token = fetch_token(request_handle)
  else
    token = token_cache.token
  end

  -- Add token if available
  if token then
    request_handle:headers():add("{{ getenv "GITHUB_OIDC_TOKEN_HEADER_NAME" }}", "Bearer " .. token)
    request_handle:logInfo("Added JWT token to request")
  else
    request_handle:logError("No valid token available")
  end

  -- Always ensure repository header
  if not request_handle:headers():get("x-repository") then
    request_handle:headers():add("x-repository", "{{ getenv "GITHUB_REPOSITORY" }}")
  end
end
