-- Load the JSON library for decoding JSON payloads
JSON = (loadfile "/etc/envoy/json.lua")() -- One-time load of the routines

-- Variables to store JWT token and its expiration time
local jwt_expiration = 0
local jwt_token = nil
local token_refresh_lock = false -- Mutex for token refresh
local token_refresh_complete = false -- Flag to indicate token is ready
local main_dns_zone = "{{ getenv "MAIN_DNS_ZONE" }}"
local escaped_main_dns_zone = main_dns_zone:gsub("[%.%+%*%?%^%$%(%)%%]", "%%%1")

-- Constants for headers
local GITHUB_OIDC_TOKEN_HEADER = "{{ getenv "GITHUB_OIDC_TOKEN_HEADER_NAME" }}"
local GITHUB_REPOSITORY_HEADER = "x-repository"

-- Log prefix for consistent logging
log_prefix = "local-proxy: LUA:: "

-- Function to decode base64 value
local function decode_base64(input)
    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    input = input:gsub('[^' .. b .. '=]', '') -- Remove invalid characters

    return (input:gsub('.', function(x)
        if x == '=' then
            return '' -- Ignore padding characters
        end
        local r, f = '', (b:find(x) - 1)
        for i = 6, 1, -1 do
            r = r .. (f % 2 ^ i - f % 2 ^ (i - 1) > 0 and '1' or '0') -- Convert to binary
        end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if #x ~= 8 then
            return '' -- Skip incomplete bytes
        end
        local c = 0
        for i = 1, 8 do
            c = c + (x:sub(i, i) == '1' and 2 ^ (8 - i) or 0) -- Convert binary to decimal
        end
        return string.char(c) -- Convert decimal to ASCII character
    end))
end

-- Function to get JWT expiration time from JWT token
local function get_jwt_exp(jwt)
    -- Extract the three parts of the JWT: header, payload, and signature
    local header, payload, signature = jwt:match("([^%.]+)%.([^%.]+)%.([^%.]+)")
    if not (header and payload and signature) then
        return nil -- Invalid JWT format
    end

    -- Decode the payload from Base64
    local decoded_payload = decode_base64(payload)
    if not decoded_payload then
        return nil -- Failed to decode payload
    end

    -- Parse the decoded payload as JSON
    local decoded_json = JSON.decode(decoded_payload)
    if not decoded_json or not decoded_json.exp then
        return nil -- Missing expiration time in payload
    end

    return decoded_json.exp -- Return the expiration time
end

-- Function to wait for token to be available with timeout
local function wait_for_token(request_handle, timeout_ms)
    local start_time = os.time() * 1000 -- Convert to milliseconds
    local timeout_seconds = timeout_ms / 1000
    
    request_handle:logDebug(log_prefix .. "Waiting for token to become available")
    
    -- Track in thread-local storage if we're waiting
    request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", "waiting_for_token", true)
    
    -- Use a semaphore-like approach with a thread-local variable to signal completion
    local wait_complete = false
    
    -- Create a handler for the timer
    local function check_token(timer_id)
        local current_time = os.time() * 1000
        
        -- Token is available or timeout reached
        if jwt_token then
            request_handle:logInfo(log_prefix .. "Token became available after " .. 
                                 ((current_time - start_time) / 1000) .. " seconds")
            request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", "waiting_for_token", false)
            wait_complete = true
            return true
        elseif (current_time - start_time) >= timeout_ms then
            request_handle:logErr(log_prefix .. "Timeout waiting for token after " .. timeout_seconds .. " seconds")
            request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", "waiting_for_token", false)
            wait_complete = true
            return false
        else
            -- Re-schedule the timer to check again in 100ms
            request_handle:registerTimer(100, check_token)
            return true
        end
    end
    
    -- Start the timer
    request_handle:registerTimer(100, check_token)
    
    -- This is a blocking approach required if we need to wait for the token
    -- Non-CPU intensive approach using only one httpCall with a long timeout
    -- Since the handler above will keep checking token status, we just need to block here
    local end_time = start_time + timeout_ms
    
    -- Make one call with the full timeout as a blocking wait mechanism
    -- This won't create log spam since it's only one call per token wait
    if not jwt_token then
        -- Using an internal HEAD request with a calculated timeout
        -- We'll set up the timeout to be slightly shorter than our overall timeout
        -- to ensure we can properly return the correct status
        local wait_timeout = math.min(timeout_ms - 100, 30000) -- Cap at 30 seconds for safety
        
        -- The httpCall will either:
        -- 1. Timeout after wait_timeout milliseconds (most likely)
        -- 2. Return earlier if the server rejects it quickly
        -- Either way, we'll check our wait_complete flag afterward
        pcall(function()
            request_handle:httpCall(
                "github_oidc_endpoint",  -- Reuse the existing cluster
                {
                    [":method"] = "HEAD", -- Minimal request
                    [":path"] = "/wait", -- Path unlikely to exist to force a 404
                    [":authority"] = "wait.internal" -- Internal hostname
                },
                nil, -- No body
                wait_timeout, -- Block for most of our timeout period
                { ["timeout"] = tostring(wait_timeout) }
            )
        end)
        
        -- After the httpCall returns (timeout or rejection),
        -- check if our token is available or if wait_complete was set by the timer
        if wait_complete then
            request_handle:logDebug(log_prefix .. "Wait completed via timer callback")
        else
            request_handle:logDebug(log_prefix .. "Wait completed via httpCall return")
        end
    end
    
    return jwt_token ~= nil
end

-- Function to fetch GitHub OIDC token
function fetch_github_oidc_token(request_handle)
    -- Use token refresh lock to prevent multiple concurrent refreshes
    if token_refresh_lock then
        request_handle:logDebug(log_prefix .. "Token refresh already in progress, waiting...")
        return wait_for_token(request_handle, 5000) -- Wait up to 5 seconds for the token
    end
    
    -- Acquire the lock
    token_refresh_lock = true
    token_refresh_complete = false
    request_handle:logInfo(log_prefix .. "Starting GitHub OIDC token fetch.")
    
    -- Set the audience and the GitHub OIDC token URL
    local audience = "gap"
    local oidc_url = "{{ getenv "ACTIONS_ID_TOKEN_REQUEST_URL" }}&audience=" .. audience

    -- Prepare headers for the HTTP request
    local headers = {
        [":method"] = "GET",
        [":path"] = oidc_url,
        [":authority"] = "{{ getenv "GITHUB_OIDC_HOSTNAME" }}",
        ["Authorization"] = "Bearer {{ getenv "ACTIONS_ID_TOKEN_REQUEST_TOKEN" }}",
        ["accept"] = "application/json",
    }

    request_handle:logDebug(log_prefix .. "Making HTTP call to GitHub OIDC endpoint")
    
    -- Make the HTTP call to fetch the OIDC token (synchronously)
    local success, result = pcall(function()
        local response_headers, response_body = request_handle:httpCall(
            "github_oidc_endpoint",
            headers,
            nil, -- No body for GET requests
            10000 -- Timeout in milliseconds (10 seconds)
        )
        
        if response_headers[":status"] == "200" then
            request_handle:logInfo(log_prefix .. "GitHub OIDC token fetched successfully.")
            local success_parse, token_data = pcall(function() 
                return JSON.decode(response_body)
            end)
            
            if success_parse and token_data and token_data.value then
                jwt_token = token_data.value -- Store the token
                local exp = get_jwt_exp(jwt_token)
                if exp then
                    jwt_expiration = exp
                    request_handle:logInfo(log_prefix .. "Token will expire at: " .. os.date("%Y-%m-%d %H:%M:%S", jwt_expiration))
                else
                    -- If we can't parse expiration, use a conservative default (5 minutes)
                    jwt_expiration = os.time() + 300
                    request_handle:logWarn(log_prefix .. "Could not parse token expiration, using 5 min default")
                end
                request_handle:logDebug(log_prefix .. "Fetched JWT length: " .. string.len(jwt_token))
                return true
            else
                request_handle:logErr(log_prefix .. "Failed to parse token response: " .. tostring(response_body))
                return false
            end
        else
            local status = response_headers[":status"] or "unknown"
            request_handle:logErr(log_prefix .. "Failed to fetch GitHub OIDC token. Status: " .. status)
            return false
        end
    end)
    
    -- Release the lock and notify waiters
    token_refresh_complete = true
    token_refresh_lock = false
    
    if not success then
        request_handle:logErr(log_prefix .. "Exception during token fetch: " .. tostring(result))
        return false
    end
    
    return success and jwt_token ~= nil
end

-- Function to refresh the token if needed and wait for it
function refresh_token_if_needed(request_handle)
    local current_time = os.time()
    
    -- Refresh if token is missing or expires within 60 seconds
    if not jwt_token or jwt_expiration - current_time < 60 then
        request_handle:logInfo(log_prefix .. "Token missing or expiring soon, refreshing. Current time: " .. 
                             os.date("%Y-%m-%d %H:%M:%S", current_time) .. 
                             ", expiration: " .. (jwt_token and os.date("%Y-%m-%d %H:%M:%S", jwt_expiration) or "none"))
                             
        -- First try to fetch a new token
        local success = fetch_github_oidc_token(request_handle)
        
        -- If we're still waiting for a token, wait for it
        if not success and token_refresh_lock then
            success = wait_for_token(request_handle, 5000)
        end
        
        return success
    else
        local remaining = jwt_expiration - current_time
        request_handle:logDebug(log_prefix .. "Token is valid. Expires in: " .. remaining .. " seconds.")
        return true
    end
end

-- Function to ensure that the host header's port will be 443
local function ensure_port_443(request_handle)
    local host = request_handle:headers():get(":authority")
    if host then
        -- Handle both the exact domain and any subdomain with a port
        if host:find("%." .. escaped_main_dns_zone .. ":%d+$") or 
           host:find("^" .. escaped_main_dns_zone .. ":%d+$") then
            request_handle:headers():remove(":authority")
            local new_host = host:gsub(":%d+$", ":443")
            request_handle:headers():add(":authority", new_host)
            request_handle:logDebug(log_prefix .. "Updated :authority header to force port 443: " .. new_host)
        end
    end
end

-- Function to add headers to the request
local function add_headers(request_handle)
    -- First ensure we have a token
    if not jwt_token then
        request_handle:logErr(log_prefix .. "Attempted to add headers but no JWT token available")
        return false
    end

    -- Ensure no null or empty x-repository header exists
    local repoHeader = request_handle:headers():get(GITHUB_REPOSITORY_HEADER)
    if not repoHeader or repoHeader == "" then
        request_handle:headers():remove(GITHUB_REPOSITORY_HEADER)
        request_handle:headers():add(GITHUB_REPOSITORY_HEADER, "{{ getenv "GITHUB_REPOSITORY" }}")
        request_handle:logDebug(log_prefix .. "Added default x-repository header")
    else
        request_handle:logDebug(log_prefix .. "x-repository header already present: " .. tostring(repoHeader))
    end

    -- Remove the existing OIDC token header if present
    request_handle:headers():remove(GITHUB_OIDC_TOKEN_HEADER)
    
    -- Add the new JWT token to the header (do not log the token value itself)
    request_handle:headers():add(GITHUB_OIDC_TOKEN_HEADER, "Bearer " .. jwt_token)
    request_handle:logInfo(log_prefix .. "Added GitHub JWT OIDC token with length: " .. string.len(jwt_token) ..
                         " to header: " .. GITHUB_OIDC_TOKEN_HEADER)

    -- Ensure that the host header's port will be 443
    ensure_port_443(request_handle)
    
    return true
end

-- Main function for Envoy request interception
function envoy_on_request(request_handle)
    local host = request_handle:headers():get(":authority") or ""
    local path = request_handle:headers():get(":path") or ""
    local user_agent = request_handle:headers():get("user-agent") or "unknown"
    local req_id = request_handle:headers():get("x-request-id") or "unknown"
    
    request_handle:logInfo(log_prefix .. "Processing request [" .. req_id .. "]: " .. host .. path)

    -- Always ensure x-repository is set for all requests right away
    local repoHeader = request_handle:headers():get(GITHUB_REPOSITORY_HEADER)
    if not repoHeader or repoHeader == "" then
        request_handle:headers():remove(GITHUB_REPOSITORY_HEADER)
        request_handle:headers():add(GITHUB_REPOSITORY_HEADER, "{{ getenv "GITHUB_REPOSITORY" }}")
        request_handle:logDebug(log_prefix .. "Initial header set: Added x-repository header")
    end
   
    request_handle:logDebug(log_prefix .. "Authentication required for request [" .. req_id .. "]")
    
    -- First refresh the token if needed and wait for it
    local token_success = refresh_token_if_needed(request_handle)
    
    -- Verify we have a valid token before proceeding
    if not token_success or not jwt_token then
        request_handle:logErr(log_prefix .. "No valid JWT token available for request [" .. req_id .. "]")
        -- Allow the request to continue, but it will likely fail with 401
        return
    end

    -- Add all required headers
    if not add_headers(request_handle) then
        request_handle:logErr(log_prefix .. "Failed to add headers for request [" .. req_id .. "]")
        return
    end
    
    -- Final verification to ensure token was added
    local final_auth_header = request_handle:headers():get(GITHUB_OIDC_TOKEN_HEADER)
    if not final_auth_header or final_auth_header == "" then
        request_handle:logErr(log_prefix .. "Final check: JWT token header is missing for request [" .. req_id .. "]")
        
        -- Emergency token addition if the token is actually available
        if jwt_token then
            request_handle:headers():remove(GITHUB_OIDC_TOKEN_HEADER)
            request_handle:headers():add(GITHUB_OIDC_TOKEN_HEADER, "Bearer " .. jwt_token)
            request_handle:logInfo(log_prefix .. "Emergency token addition for request [" .. req_id .. "]")
        end
    end

    -- Final logging
    request_handle:logInfo(log_prefix .. "Request [" .. req_id .. "] processing complete: With auth token")
end
